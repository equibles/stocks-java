/*
 * Stocks
 * <h3>Authentication</h3>                     You need to authenticate to use this API.                     To authenticate click on the \"Authorize\" button and do one of the following steps.<br />                     1. Send your API key in the headers of the request by typing \"Bearer my-key\" on the Bearer authorization scheme.<br />                     2. Send your API key on the \"ApiKey\" query string parameter. To do this type your API key in the Query String authorization scheme.<br />                     Both methods are equally valid. We offer both options so that you can use the method that is easier to use in your application.<br />                     <br />                     <h3>API limits</h3>                     Your API key may be subject to daily/hourly limits. To know how much requests you have left look at the following headers in the response.<br />                     1. <strong>x-ratelimit-limit</strong> - The total number of requests that you are allowed to make in a given period (hour/day)                       2. <strong>x-ratelimit-remaining</strong> - The number of remaining requests that you can perform in the current period.<br />                     3. <strong>x-ratelimit-reset</strong> - The number of seconds until the current period resets.<br />                     <br />                     <h3>Suggestions</h3>                     You don't need to implement the whole API by hand in your programming language of choice.<br />                     Since this API has an OpenAPI specification you can use                      <a href=\"https://github.com/swagger-api/swagger-codegen\" target=\"_blank\">Swagger Generator</a>                      to automatically generate client stubs for more than 30 programming languages.                     <br />                     <br />                     You don't have an API key? <a href=\"https://www.equibles.com/api/pricing\" target=\"_blank\">Get one for free here.</a>
 *
 * OpenAPI spec version: v1
 * Contact: equibles@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.equibles.stocks.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * CashFlowStatement
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-01-28T01:43:07.282Z[Europe/Lisbon]")
public class CashFlowStatement {
  @SerializedName("operatingCashFlow")
  private Long operatingCashFlow = null;

  @SerializedName("paymentsForOperatingActivities")
  private Long paymentsForOperatingActivities = null;

  @SerializedName("proceedsFromOperatingActivities")
  private Long proceedsFromOperatingActivities = null;

  @SerializedName("changeInOperatingLiabilities")
  private Long changeInOperatingLiabilities = null;

  @SerializedName("changeInOperatingAssets")
  private Long changeInOperatingAssets = null;

  @SerializedName("depreciationDepletionAndAmortization")
  private Long depreciationDepletionAndAmortization = null;

  @SerializedName("capitalExpenditures")
  private Long capitalExpenditures = null;

  @SerializedName("changeInReceivables")
  private Long changeInReceivables = null;

  @SerializedName("changeInInventory")
  private Long changeInInventory = null;

  @SerializedName("profitLoss")
  private Long profitLoss = null;

  @SerializedName("investments")
  private Long investments = null;

  @SerializedName("cashFlowFromInvestment")
  private Long cashFlowFromInvestment = null;

  @SerializedName("cashFlowFromFinancing")
  private Long cashFlowFromFinancing = null;

  @SerializedName("proceedsFromRepaymentsOfShortTermDebt")
  private Long proceedsFromRepaymentsOfShortTermDebt = null;

  @SerializedName("paymentsForRepurchaseOfCommonStock")
  private Long paymentsForRepurchaseOfCommonStock = null;

  @SerializedName("paymentsForRepurchaseOfEquity")
  private Long paymentsForRepurchaseOfEquity = null;

  @SerializedName("paymentsForRepurchaseOfPreferredStock")
  private Long paymentsForRepurchaseOfPreferredStock = null;

  @SerializedName("dividendPayout")
  private Long dividendPayout = null;

  @SerializedName("dividendPayoutCommonStock")
  private Long dividendPayoutCommonStock = null;

  @SerializedName("dividendPayoutPreferredStock")
  private Long dividendPayoutPreferredStock = null;

  @SerializedName("proceedsFromIssuanceOfCommonStock")
  private Long proceedsFromIssuanceOfCommonStock = null;

  @SerializedName("proceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet")
  private Long proceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet = null;

  @SerializedName("proceedsFromIssuanceOfPreferredStock")
  private Long proceedsFromIssuanceOfPreferredStock = null;

  @SerializedName("proceedsFromRepurchaseOfEquity")
  private Long proceedsFromRepurchaseOfEquity = null;

  @SerializedName("proceedsFromSaleOfTreasuryStock")
  private Long proceedsFromSaleOfTreasuryStock = null;

  @SerializedName("changeInCashAndCashEquivalents")
  private Long changeInCashAndCashEquivalents = null;

  @SerializedName("changeInExchangeRate")
  private Long changeInExchangeRate = null;

  @SerializedName("netIncome")
  private Long netIncome = null;

  @SerializedName("netBorrowings")
  private Long netBorrowings = null;

  @SerializedName("changeInWorkingCapital")
  private Long changeInWorkingCapital = null;

  @SerializedName("otherNonCashItems")
  private Long otherNonCashItems = null;

  @SerializedName("freeCashFlow")
  private Long freeCashFlow = null;

  public CashFlowStatement operatingCashFlow(Long operatingCashFlow) {
    this.operatingCashFlow = operatingCashFlow;
    return this;
  }

   /**
   * Get operatingCashFlow
   * @return operatingCashFlow
  **/
  @Schema(description = "")
  public Long getOperatingCashFlow() {
    return operatingCashFlow;
  }

  public void setOperatingCashFlow(Long operatingCashFlow) {
    this.operatingCashFlow = operatingCashFlow;
  }

  public CashFlowStatement paymentsForOperatingActivities(Long paymentsForOperatingActivities) {
    this.paymentsForOperatingActivities = paymentsForOperatingActivities;
    return this;
  }

   /**
   * Get paymentsForOperatingActivities
   * @return paymentsForOperatingActivities
  **/
  @Schema(description = "")
  public Long getPaymentsForOperatingActivities() {
    return paymentsForOperatingActivities;
  }

  public void setPaymentsForOperatingActivities(Long paymentsForOperatingActivities) {
    this.paymentsForOperatingActivities = paymentsForOperatingActivities;
  }

  public CashFlowStatement proceedsFromOperatingActivities(Long proceedsFromOperatingActivities) {
    this.proceedsFromOperatingActivities = proceedsFromOperatingActivities;
    return this;
  }

   /**
   * Get proceedsFromOperatingActivities
   * @return proceedsFromOperatingActivities
  **/
  @Schema(description = "")
  public Long getProceedsFromOperatingActivities() {
    return proceedsFromOperatingActivities;
  }

  public void setProceedsFromOperatingActivities(Long proceedsFromOperatingActivities) {
    this.proceedsFromOperatingActivities = proceedsFromOperatingActivities;
  }

  public CashFlowStatement changeInOperatingLiabilities(Long changeInOperatingLiabilities) {
    this.changeInOperatingLiabilities = changeInOperatingLiabilities;
    return this;
  }

   /**
   * Get changeInOperatingLiabilities
   * @return changeInOperatingLiabilities
  **/
  @Schema(description = "")
  public Long getChangeInOperatingLiabilities() {
    return changeInOperatingLiabilities;
  }

  public void setChangeInOperatingLiabilities(Long changeInOperatingLiabilities) {
    this.changeInOperatingLiabilities = changeInOperatingLiabilities;
  }

  public CashFlowStatement changeInOperatingAssets(Long changeInOperatingAssets) {
    this.changeInOperatingAssets = changeInOperatingAssets;
    return this;
  }

   /**
   * Get changeInOperatingAssets
   * @return changeInOperatingAssets
  **/
  @Schema(description = "")
  public Long getChangeInOperatingAssets() {
    return changeInOperatingAssets;
  }

  public void setChangeInOperatingAssets(Long changeInOperatingAssets) {
    this.changeInOperatingAssets = changeInOperatingAssets;
  }

  public CashFlowStatement depreciationDepletionAndAmortization(Long depreciationDepletionAndAmortization) {
    this.depreciationDepletionAndAmortization = depreciationDepletionAndAmortization;
    return this;
  }

   /**
   * Get depreciationDepletionAndAmortization
   * @return depreciationDepletionAndAmortization
  **/
  @Schema(description = "")
  public Long getDepreciationDepletionAndAmortization() {
    return depreciationDepletionAndAmortization;
  }

  public void setDepreciationDepletionAndAmortization(Long depreciationDepletionAndAmortization) {
    this.depreciationDepletionAndAmortization = depreciationDepletionAndAmortization;
  }

  public CashFlowStatement capitalExpenditures(Long capitalExpenditures) {
    this.capitalExpenditures = capitalExpenditures;
    return this;
  }

   /**
   * Get capitalExpenditures
   * @return capitalExpenditures
  **/
  @Schema(description = "")
  public Long getCapitalExpenditures() {
    return capitalExpenditures;
  }

  public void setCapitalExpenditures(Long capitalExpenditures) {
    this.capitalExpenditures = capitalExpenditures;
  }

  public CashFlowStatement changeInReceivables(Long changeInReceivables) {
    this.changeInReceivables = changeInReceivables;
    return this;
  }

   /**
   * Get changeInReceivables
   * @return changeInReceivables
  **/
  @Schema(description = "")
  public Long getChangeInReceivables() {
    return changeInReceivables;
  }

  public void setChangeInReceivables(Long changeInReceivables) {
    this.changeInReceivables = changeInReceivables;
  }

  public CashFlowStatement changeInInventory(Long changeInInventory) {
    this.changeInInventory = changeInInventory;
    return this;
  }

   /**
   * Get changeInInventory
   * @return changeInInventory
  **/
  @Schema(description = "")
  public Long getChangeInInventory() {
    return changeInInventory;
  }

  public void setChangeInInventory(Long changeInInventory) {
    this.changeInInventory = changeInInventory;
  }

  public CashFlowStatement profitLoss(Long profitLoss) {
    this.profitLoss = profitLoss;
    return this;
  }

   /**
   * Get profitLoss
   * @return profitLoss
  **/
  @Schema(description = "")
  public Long getProfitLoss() {
    return profitLoss;
  }

  public void setProfitLoss(Long profitLoss) {
    this.profitLoss = profitLoss;
  }

  public CashFlowStatement investments(Long investments) {
    this.investments = investments;
    return this;
  }

   /**
   * Get investments
   * @return investments
  **/
  @Schema(description = "")
  public Long getInvestments() {
    return investments;
  }

  public void setInvestments(Long investments) {
    this.investments = investments;
  }

  public CashFlowStatement cashFlowFromInvestment(Long cashFlowFromInvestment) {
    this.cashFlowFromInvestment = cashFlowFromInvestment;
    return this;
  }

   /**
   * Get cashFlowFromInvestment
   * @return cashFlowFromInvestment
  **/
  @Schema(description = "")
  public Long getCashFlowFromInvestment() {
    return cashFlowFromInvestment;
  }

  public void setCashFlowFromInvestment(Long cashFlowFromInvestment) {
    this.cashFlowFromInvestment = cashFlowFromInvestment;
  }

  public CashFlowStatement cashFlowFromFinancing(Long cashFlowFromFinancing) {
    this.cashFlowFromFinancing = cashFlowFromFinancing;
    return this;
  }

   /**
   * Get cashFlowFromFinancing
   * @return cashFlowFromFinancing
  **/
  @Schema(description = "")
  public Long getCashFlowFromFinancing() {
    return cashFlowFromFinancing;
  }

  public void setCashFlowFromFinancing(Long cashFlowFromFinancing) {
    this.cashFlowFromFinancing = cashFlowFromFinancing;
  }

  public CashFlowStatement proceedsFromRepaymentsOfShortTermDebt(Long proceedsFromRepaymentsOfShortTermDebt) {
    this.proceedsFromRepaymentsOfShortTermDebt = proceedsFromRepaymentsOfShortTermDebt;
    return this;
  }

   /**
   * Get proceedsFromRepaymentsOfShortTermDebt
   * @return proceedsFromRepaymentsOfShortTermDebt
  **/
  @Schema(description = "")
  public Long getProceedsFromRepaymentsOfShortTermDebt() {
    return proceedsFromRepaymentsOfShortTermDebt;
  }

  public void setProceedsFromRepaymentsOfShortTermDebt(Long proceedsFromRepaymentsOfShortTermDebt) {
    this.proceedsFromRepaymentsOfShortTermDebt = proceedsFromRepaymentsOfShortTermDebt;
  }

  public CashFlowStatement paymentsForRepurchaseOfCommonStock(Long paymentsForRepurchaseOfCommonStock) {
    this.paymentsForRepurchaseOfCommonStock = paymentsForRepurchaseOfCommonStock;
    return this;
  }

   /**
   * Get paymentsForRepurchaseOfCommonStock
   * @return paymentsForRepurchaseOfCommonStock
  **/
  @Schema(description = "")
  public Long getPaymentsForRepurchaseOfCommonStock() {
    return paymentsForRepurchaseOfCommonStock;
  }

  public void setPaymentsForRepurchaseOfCommonStock(Long paymentsForRepurchaseOfCommonStock) {
    this.paymentsForRepurchaseOfCommonStock = paymentsForRepurchaseOfCommonStock;
  }

  public CashFlowStatement paymentsForRepurchaseOfEquity(Long paymentsForRepurchaseOfEquity) {
    this.paymentsForRepurchaseOfEquity = paymentsForRepurchaseOfEquity;
    return this;
  }

   /**
   * Get paymentsForRepurchaseOfEquity
   * @return paymentsForRepurchaseOfEquity
  **/
  @Schema(description = "")
  public Long getPaymentsForRepurchaseOfEquity() {
    return paymentsForRepurchaseOfEquity;
  }

  public void setPaymentsForRepurchaseOfEquity(Long paymentsForRepurchaseOfEquity) {
    this.paymentsForRepurchaseOfEquity = paymentsForRepurchaseOfEquity;
  }

  public CashFlowStatement paymentsForRepurchaseOfPreferredStock(Long paymentsForRepurchaseOfPreferredStock) {
    this.paymentsForRepurchaseOfPreferredStock = paymentsForRepurchaseOfPreferredStock;
    return this;
  }

   /**
   * Get paymentsForRepurchaseOfPreferredStock
   * @return paymentsForRepurchaseOfPreferredStock
  **/
  @Schema(description = "")
  public Long getPaymentsForRepurchaseOfPreferredStock() {
    return paymentsForRepurchaseOfPreferredStock;
  }

  public void setPaymentsForRepurchaseOfPreferredStock(Long paymentsForRepurchaseOfPreferredStock) {
    this.paymentsForRepurchaseOfPreferredStock = paymentsForRepurchaseOfPreferredStock;
  }

  public CashFlowStatement dividendPayout(Long dividendPayout) {
    this.dividendPayout = dividendPayout;
    return this;
  }

   /**
   * Get dividendPayout
   * @return dividendPayout
  **/
  @Schema(description = "")
  public Long getDividendPayout() {
    return dividendPayout;
  }

  public void setDividendPayout(Long dividendPayout) {
    this.dividendPayout = dividendPayout;
  }

  public CashFlowStatement dividendPayoutCommonStock(Long dividendPayoutCommonStock) {
    this.dividendPayoutCommonStock = dividendPayoutCommonStock;
    return this;
  }

   /**
   * Get dividendPayoutCommonStock
   * @return dividendPayoutCommonStock
  **/
  @Schema(description = "")
  public Long getDividendPayoutCommonStock() {
    return dividendPayoutCommonStock;
  }

  public void setDividendPayoutCommonStock(Long dividendPayoutCommonStock) {
    this.dividendPayoutCommonStock = dividendPayoutCommonStock;
  }

  public CashFlowStatement dividendPayoutPreferredStock(Long dividendPayoutPreferredStock) {
    this.dividendPayoutPreferredStock = dividendPayoutPreferredStock;
    return this;
  }

   /**
   * Get dividendPayoutPreferredStock
   * @return dividendPayoutPreferredStock
  **/
  @Schema(description = "")
  public Long getDividendPayoutPreferredStock() {
    return dividendPayoutPreferredStock;
  }

  public void setDividendPayoutPreferredStock(Long dividendPayoutPreferredStock) {
    this.dividendPayoutPreferredStock = dividendPayoutPreferredStock;
  }

  public CashFlowStatement proceedsFromIssuanceOfCommonStock(Long proceedsFromIssuanceOfCommonStock) {
    this.proceedsFromIssuanceOfCommonStock = proceedsFromIssuanceOfCommonStock;
    return this;
  }

   /**
   * Get proceedsFromIssuanceOfCommonStock
   * @return proceedsFromIssuanceOfCommonStock
  **/
  @Schema(description = "")
  public Long getProceedsFromIssuanceOfCommonStock() {
    return proceedsFromIssuanceOfCommonStock;
  }

  public void setProceedsFromIssuanceOfCommonStock(Long proceedsFromIssuanceOfCommonStock) {
    this.proceedsFromIssuanceOfCommonStock = proceedsFromIssuanceOfCommonStock;
  }

  public CashFlowStatement proceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet(Long proceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet) {
    this.proceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet = proceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet;
    return this;
  }

   /**
   * Get proceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet
   * @return proceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet
  **/
  @Schema(description = "")
  public Long getProceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet() {
    return proceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet;
  }

  public void setProceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet(Long proceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet) {
    this.proceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet = proceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet;
  }

  public CashFlowStatement proceedsFromIssuanceOfPreferredStock(Long proceedsFromIssuanceOfPreferredStock) {
    this.proceedsFromIssuanceOfPreferredStock = proceedsFromIssuanceOfPreferredStock;
    return this;
  }

   /**
   * Get proceedsFromIssuanceOfPreferredStock
   * @return proceedsFromIssuanceOfPreferredStock
  **/
  @Schema(description = "")
  public Long getProceedsFromIssuanceOfPreferredStock() {
    return proceedsFromIssuanceOfPreferredStock;
  }

  public void setProceedsFromIssuanceOfPreferredStock(Long proceedsFromIssuanceOfPreferredStock) {
    this.proceedsFromIssuanceOfPreferredStock = proceedsFromIssuanceOfPreferredStock;
  }

  public CashFlowStatement proceedsFromRepurchaseOfEquity(Long proceedsFromRepurchaseOfEquity) {
    this.proceedsFromRepurchaseOfEquity = proceedsFromRepurchaseOfEquity;
    return this;
  }

   /**
   * Get proceedsFromRepurchaseOfEquity
   * @return proceedsFromRepurchaseOfEquity
  **/
  @Schema(description = "")
  public Long getProceedsFromRepurchaseOfEquity() {
    return proceedsFromRepurchaseOfEquity;
  }

  public void setProceedsFromRepurchaseOfEquity(Long proceedsFromRepurchaseOfEquity) {
    this.proceedsFromRepurchaseOfEquity = proceedsFromRepurchaseOfEquity;
  }

  public CashFlowStatement proceedsFromSaleOfTreasuryStock(Long proceedsFromSaleOfTreasuryStock) {
    this.proceedsFromSaleOfTreasuryStock = proceedsFromSaleOfTreasuryStock;
    return this;
  }

   /**
   * Get proceedsFromSaleOfTreasuryStock
   * @return proceedsFromSaleOfTreasuryStock
  **/
  @Schema(description = "")
  public Long getProceedsFromSaleOfTreasuryStock() {
    return proceedsFromSaleOfTreasuryStock;
  }

  public void setProceedsFromSaleOfTreasuryStock(Long proceedsFromSaleOfTreasuryStock) {
    this.proceedsFromSaleOfTreasuryStock = proceedsFromSaleOfTreasuryStock;
  }

  public CashFlowStatement changeInCashAndCashEquivalents(Long changeInCashAndCashEquivalents) {
    this.changeInCashAndCashEquivalents = changeInCashAndCashEquivalents;
    return this;
  }

   /**
   * Get changeInCashAndCashEquivalents
   * @return changeInCashAndCashEquivalents
  **/
  @Schema(description = "")
  public Long getChangeInCashAndCashEquivalents() {
    return changeInCashAndCashEquivalents;
  }

  public void setChangeInCashAndCashEquivalents(Long changeInCashAndCashEquivalents) {
    this.changeInCashAndCashEquivalents = changeInCashAndCashEquivalents;
  }

  public CashFlowStatement changeInExchangeRate(Long changeInExchangeRate) {
    this.changeInExchangeRate = changeInExchangeRate;
    return this;
  }

   /**
   * Get changeInExchangeRate
   * @return changeInExchangeRate
  **/
  @Schema(description = "")
  public Long getChangeInExchangeRate() {
    return changeInExchangeRate;
  }

  public void setChangeInExchangeRate(Long changeInExchangeRate) {
    this.changeInExchangeRate = changeInExchangeRate;
  }

  public CashFlowStatement netIncome(Long netIncome) {
    this.netIncome = netIncome;
    return this;
  }

   /**
   * Get netIncome
   * @return netIncome
  **/
  @Schema(description = "")
  public Long getNetIncome() {
    return netIncome;
  }

  public void setNetIncome(Long netIncome) {
    this.netIncome = netIncome;
  }

  public CashFlowStatement netBorrowings(Long netBorrowings) {
    this.netBorrowings = netBorrowings;
    return this;
  }

   /**
   * Get netBorrowings
   * @return netBorrowings
  **/
  @Schema(description = "")
  public Long getNetBorrowings() {
    return netBorrowings;
  }

  public void setNetBorrowings(Long netBorrowings) {
    this.netBorrowings = netBorrowings;
  }

  public CashFlowStatement changeInWorkingCapital(Long changeInWorkingCapital) {
    this.changeInWorkingCapital = changeInWorkingCapital;
    return this;
  }

   /**
   * Get changeInWorkingCapital
   * @return changeInWorkingCapital
  **/
  @Schema(description = "")
  public Long getChangeInWorkingCapital() {
    return changeInWorkingCapital;
  }

  public void setChangeInWorkingCapital(Long changeInWorkingCapital) {
    this.changeInWorkingCapital = changeInWorkingCapital;
  }

  public CashFlowStatement otherNonCashItems(Long otherNonCashItems) {
    this.otherNonCashItems = otherNonCashItems;
    return this;
  }

   /**
   * Get otherNonCashItems
   * @return otherNonCashItems
  **/
  @Schema(description = "")
  public Long getOtherNonCashItems() {
    return otherNonCashItems;
  }

  public void setOtherNonCashItems(Long otherNonCashItems) {
    this.otherNonCashItems = otherNonCashItems;
  }

  public CashFlowStatement freeCashFlow(Long freeCashFlow) {
    this.freeCashFlow = freeCashFlow;
    return this;
  }

   /**
   * Get freeCashFlow
   * @return freeCashFlow
  **/
  @Schema(description = "")
  public Long getFreeCashFlow() {
    return freeCashFlow;
  }

  public void setFreeCashFlow(Long freeCashFlow) {
    this.freeCashFlow = freeCashFlow;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CashFlowStatement cashFlowStatement = (CashFlowStatement) o;
    return Objects.equals(this.operatingCashFlow, cashFlowStatement.operatingCashFlow) &&
        Objects.equals(this.paymentsForOperatingActivities, cashFlowStatement.paymentsForOperatingActivities) &&
        Objects.equals(this.proceedsFromOperatingActivities, cashFlowStatement.proceedsFromOperatingActivities) &&
        Objects.equals(this.changeInOperatingLiabilities, cashFlowStatement.changeInOperatingLiabilities) &&
        Objects.equals(this.changeInOperatingAssets, cashFlowStatement.changeInOperatingAssets) &&
        Objects.equals(this.depreciationDepletionAndAmortization, cashFlowStatement.depreciationDepletionAndAmortization) &&
        Objects.equals(this.capitalExpenditures, cashFlowStatement.capitalExpenditures) &&
        Objects.equals(this.changeInReceivables, cashFlowStatement.changeInReceivables) &&
        Objects.equals(this.changeInInventory, cashFlowStatement.changeInInventory) &&
        Objects.equals(this.profitLoss, cashFlowStatement.profitLoss) &&
        Objects.equals(this.investments, cashFlowStatement.investments) &&
        Objects.equals(this.cashFlowFromInvestment, cashFlowStatement.cashFlowFromInvestment) &&
        Objects.equals(this.cashFlowFromFinancing, cashFlowStatement.cashFlowFromFinancing) &&
        Objects.equals(this.proceedsFromRepaymentsOfShortTermDebt, cashFlowStatement.proceedsFromRepaymentsOfShortTermDebt) &&
        Objects.equals(this.paymentsForRepurchaseOfCommonStock, cashFlowStatement.paymentsForRepurchaseOfCommonStock) &&
        Objects.equals(this.paymentsForRepurchaseOfEquity, cashFlowStatement.paymentsForRepurchaseOfEquity) &&
        Objects.equals(this.paymentsForRepurchaseOfPreferredStock, cashFlowStatement.paymentsForRepurchaseOfPreferredStock) &&
        Objects.equals(this.dividendPayout, cashFlowStatement.dividendPayout) &&
        Objects.equals(this.dividendPayoutCommonStock, cashFlowStatement.dividendPayoutCommonStock) &&
        Objects.equals(this.dividendPayoutPreferredStock, cashFlowStatement.dividendPayoutPreferredStock) &&
        Objects.equals(this.proceedsFromIssuanceOfCommonStock, cashFlowStatement.proceedsFromIssuanceOfCommonStock) &&
        Objects.equals(this.proceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet, cashFlowStatement.proceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet) &&
        Objects.equals(this.proceedsFromIssuanceOfPreferredStock, cashFlowStatement.proceedsFromIssuanceOfPreferredStock) &&
        Objects.equals(this.proceedsFromRepurchaseOfEquity, cashFlowStatement.proceedsFromRepurchaseOfEquity) &&
        Objects.equals(this.proceedsFromSaleOfTreasuryStock, cashFlowStatement.proceedsFromSaleOfTreasuryStock) &&
        Objects.equals(this.changeInCashAndCashEquivalents, cashFlowStatement.changeInCashAndCashEquivalents) &&
        Objects.equals(this.changeInExchangeRate, cashFlowStatement.changeInExchangeRate) &&
        Objects.equals(this.netIncome, cashFlowStatement.netIncome) &&
        Objects.equals(this.netBorrowings, cashFlowStatement.netBorrowings) &&
        Objects.equals(this.changeInWorkingCapital, cashFlowStatement.changeInWorkingCapital) &&
        Objects.equals(this.otherNonCashItems, cashFlowStatement.otherNonCashItems) &&
        Objects.equals(this.freeCashFlow, cashFlowStatement.freeCashFlow);
  }

  @Override
  public int hashCode() {
    return Objects.hash(operatingCashFlow, paymentsForOperatingActivities, proceedsFromOperatingActivities, changeInOperatingLiabilities, changeInOperatingAssets, depreciationDepletionAndAmortization, capitalExpenditures, changeInReceivables, changeInInventory, profitLoss, investments, cashFlowFromInvestment, cashFlowFromFinancing, proceedsFromRepaymentsOfShortTermDebt, paymentsForRepurchaseOfCommonStock, paymentsForRepurchaseOfEquity, paymentsForRepurchaseOfPreferredStock, dividendPayout, dividendPayoutCommonStock, dividendPayoutPreferredStock, proceedsFromIssuanceOfCommonStock, proceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet, proceedsFromIssuanceOfPreferredStock, proceedsFromRepurchaseOfEquity, proceedsFromSaleOfTreasuryStock, changeInCashAndCashEquivalents, changeInExchangeRate, netIncome, netBorrowings, changeInWorkingCapital, otherNonCashItems, freeCashFlow);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CashFlowStatement {\n");
    
    sb.append("    operatingCashFlow: ").append(toIndentedString(operatingCashFlow)).append("\n");
    sb.append("    paymentsForOperatingActivities: ").append(toIndentedString(paymentsForOperatingActivities)).append("\n");
    sb.append("    proceedsFromOperatingActivities: ").append(toIndentedString(proceedsFromOperatingActivities)).append("\n");
    sb.append("    changeInOperatingLiabilities: ").append(toIndentedString(changeInOperatingLiabilities)).append("\n");
    sb.append("    changeInOperatingAssets: ").append(toIndentedString(changeInOperatingAssets)).append("\n");
    sb.append("    depreciationDepletionAndAmortization: ").append(toIndentedString(depreciationDepletionAndAmortization)).append("\n");
    sb.append("    capitalExpenditures: ").append(toIndentedString(capitalExpenditures)).append("\n");
    sb.append("    changeInReceivables: ").append(toIndentedString(changeInReceivables)).append("\n");
    sb.append("    changeInInventory: ").append(toIndentedString(changeInInventory)).append("\n");
    sb.append("    profitLoss: ").append(toIndentedString(profitLoss)).append("\n");
    sb.append("    investments: ").append(toIndentedString(investments)).append("\n");
    sb.append("    cashFlowFromInvestment: ").append(toIndentedString(cashFlowFromInvestment)).append("\n");
    sb.append("    cashFlowFromFinancing: ").append(toIndentedString(cashFlowFromFinancing)).append("\n");
    sb.append("    proceedsFromRepaymentsOfShortTermDebt: ").append(toIndentedString(proceedsFromRepaymentsOfShortTermDebt)).append("\n");
    sb.append("    paymentsForRepurchaseOfCommonStock: ").append(toIndentedString(paymentsForRepurchaseOfCommonStock)).append("\n");
    sb.append("    paymentsForRepurchaseOfEquity: ").append(toIndentedString(paymentsForRepurchaseOfEquity)).append("\n");
    sb.append("    paymentsForRepurchaseOfPreferredStock: ").append(toIndentedString(paymentsForRepurchaseOfPreferredStock)).append("\n");
    sb.append("    dividendPayout: ").append(toIndentedString(dividendPayout)).append("\n");
    sb.append("    dividendPayoutCommonStock: ").append(toIndentedString(dividendPayoutCommonStock)).append("\n");
    sb.append("    dividendPayoutPreferredStock: ").append(toIndentedString(dividendPayoutPreferredStock)).append("\n");
    sb.append("    proceedsFromIssuanceOfCommonStock: ").append(toIndentedString(proceedsFromIssuanceOfCommonStock)).append("\n");
    sb.append("    proceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet: ").append(toIndentedString(proceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet)).append("\n");
    sb.append("    proceedsFromIssuanceOfPreferredStock: ").append(toIndentedString(proceedsFromIssuanceOfPreferredStock)).append("\n");
    sb.append("    proceedsFromRepurchaseOfEquity: ").append(toIndentedString(proceedsFromRepurchaseOfEquity)).append("\n");
    sb.append("    proceedsFromSaleOfTreasuryStock: ").append(toIndentedString(proceedsFromSaleOfTreasuryStock)).append("\n");
    sb.append("    changeInCashAndCashEquivalents: ").append(toIndentedString(changeInCashAndCashEquivalents)).append("\n");
    sb.append("    changeInExchangeRate: ").append(toIndentedString(changeInExchangeRate)).append("\n");
    sb.append("    netIncome: ").append(toIndentedString(netIncome)).append("\n");
    sb.append("    netBorrowings: ").append(toIndentedString(netBorrowings)).append("\n");
    sb.append("    changeInWorkingCapital: ").append(toIndentedString(changeInWorkingCapital)).append("\n");
    sb.append("    otherNonCashItems: ").append(toIndentedString(otherNonCashItems)).append("\n");
    sb.append("    freeCashFlow: ").append(toIndentedString(freeCashFlow)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
