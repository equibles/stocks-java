/*
 * Stocks
 * <h3>Authentication</h3>                     You need to authenticate to use this API.                     To authenticate click on the \"Authorize\" button and do one of the following steps.<br />                     1. Send your API key in the headers of the request by typing \"Bearer my-key\" on the Bearer authorization scheme.<br />                     2. Send your API key on the \"ApiKey\" query string parameter. To do this type your API key in the Query String authorization scheme.<br />                     Both methods are equally valid. We offer both options so that you can use the method that is easier to use in your application.<br />                     <br />                     <h3>API limits</h3>                     Your API key may be subject to daily/hourly limits. To know how much requests you have left look at the following headers in the response.<br />                     1. <strong>x-ratelimit-limit</strong> - The total number of requests that you are allowed to make in a given period (hour/day)                       2. <strong>x-ratelimit-remaining</strong> - The number of remaining requests that you can perform in the current period.<br />                     3. <strong>x-ratelimit-reset</strong> - The number of seconds until the current period resets.<br />                     <br />                     <h3>Suggestions</h3>                     You don't need to implement the whole API by hand in your programming language of choice.<br />                     Since this API has an OpenAPI specification you can use                      <a href=\"https://github.com/swagger-api/swagger-codegen\" target=\"_blank\">Swagger Generator</a>                      to automatically generate client stubs for more than 30 programming languages.                     <br />                     <br />                     You don't have an API key? <a href=\"https://www.equibles.com/api/pricing\" target=\"_blank\">Get one for free here.</a>
 *
 * OpenAPI spec version: v1
 * Contact: equibles@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.equibles.stocks.models;

import java.util.Objects;
import java.util.Arrays;
import com.equibles.stocks.models.Recommendation;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * ScreenerRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-01-28T01:43:07.282Z[Europe/Lisbon]")
public class ScreenerRequest {
  @SerializedName("searchQuery")
  private String searchQuery = null;

  @SerializedName("exchangeIds")
  private List<Integer> exchangeIds = null;

  @SerializedName("sectorIds")
  private List<Integer> sectorIds = null;

  @SerializedName("industryIds")
  private List<Integer> industryIds = null;

  @SerializedName("marketCapMin")
  private Double marketCapMin = null;

  @SerializedName("marketCapMax")
  private Double marketCapMax = null;

  @SerializedName("betaMin")
  private Double betaMin = null;

  @SerializedName("betaMax")
  private Double betaMax = null;

  @SerializedName("forwardDividendMin")
  private Double forwardDividendMin = null;

  @SerializedName("forwardDividendMax")
  private Double forwardDividendMax = null;

  @SerializedName("forwardDividendYieldMin")
  private Double forwardDividendYieldMin = null;

  @SerializedName("forwardDividendYieldMax")
  private Double forwardDividendYieldMax = null;

  @SerializedName("shortRatioMin")
  private Double shortRatioMin = null;

  @SerializedName("shortRatioMax")
  private Double shortRatioMax = null;

  @SerializedName("sharesShortPercentageMin")
  private Double sharesShortPercentageMin = null;

  @SerializedName("sharesShortPercentageMax")
  private Double sharesShortPercentageMax = null;

  @SerializedName("sharesShortPreviousMonthPercentageMin")
  private Double sharesShortPreviousMonthPercentageMin = null;

  @SerializedName("sharesShortPreviousMonthPercentageMax")
  private Double sharesShortPreviousMonthPercentageMax = null;

  @SerializedName("analystRecommendationMin")
  private Recommendation analystRecommendationMin = null;

  @SerializedName("analystRecommendationMax")
  private Recommendation analystRecommendationMax = null;

  @SerializedName("performanceOneDayMin")
  private Double performanceOneDayMin = null;

  @SerializedName("performanceOneDayMax")
  private Double performanceOneDayMax = null;

  @SerializedName("performanceOneWeekMin")
  private Double performanceOneWeekMin = null;

  @SerializedName("performanceOneWeekMax")
  private Double performanceOneWeekMax = null;

  @SerializedName("performanceTwoWeeksMin")
  private Double performanceTwoWeeksMin = null;

  @SerializedName("performanceTwoWeeksMax")
  private Double performanceTwoWeeksMax = null;

  @SerializedName("performanceOneMonthMin")
  private Double performanceOneMonthMin = null;

  @SerializedName("performanceOneMonthMax")
  private Double performanceOneMonthMax = null;

  @SerializedName("performanceThreeMonthsMin")
  private Double performanceThreeMonthsMin = null;

  @SerializedName("performanceThreeMonthsMax")
  private Double performanceThreeMonthsMax = null;

  @SerializedName("performanceOneYearMin")
  private Double performanceOneYearMin = null;

  @SerializedName("performanceOneYearMax")
  private Double performanceOneYearMax = null;

  @SerializedName("performanceThreeYearsMin")
  private Double performanceThreeYearsMin = null;

  @SerializedName("performanceThreeYearsMax")
  private Double performanceThreeYearsMax = null;

  @SerializedName("performanceFiveYearsMin")
  private Double performanceFiveYearsMin = null;

  @SerializedName("performanceFiveYearsMax")
  private Double performanceFiveYearsMax = null;

  @SerializedName("performanceTenYearsMin")
  private Double performanceTenYearsMin = null;

  @SerializedName("performanceTenYearsMax")
  private Double performanceTenYearsMax = null;

  @SerializedName("performanceTwentyYearsMin")
  private Double performanceTwentyYearsMin = null;

  @SerializedName("performanceTwentyYearsMax")
  private Double performanceTwentyYearsMax = null;

  @SerializedName("epsGrowthOneYearMin")
  private Double epsGrowthOneYearMin = null;

  @SerializedName("epsGrowthOneYearMax")
  private Double epsGrowthOneYearMax = null;

  @SerializedName("epsGrowthTwoYearsMin")
  private Double epsGrowthTwoYearsMin = null;

  @SerializedName("epsGrowthTwoYearsMax")
  private Double epsGrowthTwoYearsMax = null;

  @SerializedName("epsGrowthThreeYearsMin")
  private Double epsGrowthThreeYearsMin = null;

  @SerializedName("epsGrowthThreeYearsMax")
  private Double epsGrowthThreeYearsMax = null;

  @SerializedName("epsGrowthFiveYearsMin")
  private Double epsGrowthFiveYearsMin = null;

  @SerializedName("epsGrowthFiveYearsMax")
  private Double epsGrowthFiveYearsMax = null;

  @SerializedName("epsGrowthTenYearsMin")
  private Double epsGrowthTenYearsMin = null;

  @SerializedName("epsGrowthTenYearsMax")
  private Double epsGrowthTenYearsMax = null;

  @SerializedName("epsGrowthTwentyYearsMin")
  private Double epsGrowthTwentyYearsMin = null;

  @SerializedName("epsGrowthTwentyYearsMax")
  private Double epsGrowthTwentyYearsMax = null;

  @SerializedName("peMin")
  private Double peMin = null;

  @SerializedName("peMax")
  private Double peMax = null;

  @SerializedName("pegMin")
  private Double pegMin = null;

  @SerializedName("pegMax")
  private Double pegMax = null;

  @SerializedName("priceFcfMin")
  private Double priceFcfMin = null;

  @SerializedName("priceFcfMax")
  private Double priceFcfMax = null;

  @SerializedName("bookValuePerShareMin")
  private Double bookValuePerShareMin = null;

  @SerializedName("bookValuePerShareMax")
  private Double bookValuePerShareMax = null;

  @SerializedName("priceBookValuePerShareMin")
  private Double priceBookValuePerShareMin = null;

  @SerializedName("priceBookValuePerShareMax")
  private Double priceBookValuePerShareMax = null;

  @SerializedName("payoutMin")
  private Double payoutMin = null;

  @SerializedName("payoutMax")
  private Double payoutMax = null;

  @SerializedName("debtToEquityMin")
  private Double debtToEquityMin = null;

  @SerializedName("debtToEquityMax")
  private Double debtToEquityMax = null;

  @SerializedName("grossMarginMin")
  private Double grossMarginMin = null;

  @SerializedName("grossMarginMax")
  private Double grossMarginMax = null;

  @SerializedName("operatingMarginMin")
  private Double operatingMarginMin = null;

  @SerializedName("operatingMarginMax")
  private Double operatingMarginMax = null;

  @SerializedName("profitMarginMin")
  private Double profitMarginMin = null;

  @SerializedName("profitMarginMax")
  private Double profitMarginMax = null;

  @SerializedName("priceToSalesMin")
  private Double priceToSalesMin = null;

  @SerializedName("priceToSalesMax")
  private Double priceToSalesMax = null;

  @SerializedName("buybacksThreeMonthsMin")
  private Double buybacksThreeMonthsMin = null;

  @SerializedName("buybacksThreeMonthsMax")
  private Double buybacksThreeMonthsMax = null;

  @SerializedName("buybacksSixMonthsMin")
  private Double buybacksSixMonthsMin = null;

  @SerializedName("buybacksSixMonthsMax")
  private Double buybacksSixMonthsMax = null;

  @SerializedName("buybacksOneYearMin")
  private Double buybacksOneYearMin = null;

  @SerializedName("buybacksOneYearMax")
  private Double buybacksOneYearMax = null;

  @SerializedName("buybacksTwoYearsMin")
  private Double buybacksTwoYearsMin = null;

  @SerializedName("buybacksTwoYearsMax")
  private Double buybacksTwoYearsMax = null;

  @SerializedName("buybacksThreeYearsMin")
  private Double buybacksThreeYearsMin = null;

  @SerializedName("buybacksThreeYearsMax")
  private Double buybacksThreeYearsMax = null;

  @SerializedName("buybacksFiveYearsMin")
  private Double buybacksFiveYearsMin = null;

  @SerializedName("buybacksFiveYearsMax")
  private Double buybacksFiveYearsMax = null;

  @SerializedName("buybacksTenYearsMin")
  private Double buybacksTenYearsMin = null;

  @SerializedName("buybacksTenYearsMax")
  private Double buybacksTenYearsMax = null;

  @SerializedName("buybacksTwentyYearsMin")
  private Double buybacksTwentyYearsMin = null;

  @SerializedName("buybacksTwentyYearsMax")
  private Double buybacksTwentyYearsMax = null;

  @SerializedName("potentialUpside")
  private Double potentialUpside = null;

  public ScreenerRequest searchQuery(String searchQuery) {
    this.searchQuery = searchQuery;
    return this;
  }

   /**
   * A textual search term.
   * @return searchQuery
  **/
  @Schema(description = "A textual search term.")
  public String getSearchQuery() {
    return searchQuery;
  }

  public void setSearchQuery(String searchQuery) {
    this.searchQuery = searchQuery;
  }

  public ScreenerRequest exchangeIds(List<Integer> exchangeIds) {
    this.exchangeIds = exchangeIds;
    return this;
  }

  public ScreenerRequest addExchangeIdsItem(Integer exchangeIdsItem) {
    if (this.exchangeIds == null) {
      this.exchangeIds = new ArrayList<Integer>();
    }
    this.exchangeIds.add(exchangeIdsItem);
    return this;
  }

   /**
   * The ids of the exchanges to use.
   * @return exchangeIds
  **/
  @Schema(description = "The ids of the exchanges to use.")
  public List<Integer> getExchangeIds() {
    return exchangeIds;
  }

  public void setExchangeIds(List<Integer> exchangeIds) {
    this.exchangeIds = exchangeIds;
  }

  public ScreenerRequest sectorIds(List<Integer> sectorIds) {
    this.sectorIds = sectorIds;
    return this;
  }

  public ScreenerRequest addSectorIdsItem(Integer sectorIdsItem) {
    if (this.sectorIds == null) {
      this.sectorIds = new ArrayList<Integer>();
    }
    this.sectorIds.add(sectorIdsItem);
    return this;
  }

   /**
   * The ids of the sectors to use.
   * @return sectorIds
  **/
  @Schema(description = "The ids of the sectors to use.")
  public List<Integer> getSectorIds() {
    return sectorIds;
  }

  public void setSectorIds(List<Integer> sectorIds) {
    this.sectorIds = sectorIds;
  }

  public ScreenerRequest industryIds(List<Integer> industryIds) {
    this.industryIds = industryIds;
    return this;
  }

  public ScreenerRequest addIndustryIdsItem(Integer industryIdsItem) {
    if (this.industryIds == null) {
      this.industryIds = new ArrayList<Integer>();
    }
    this.industryIds.add(industryIdsItem);
    return this;
  }

   /**
   * The ids of the industries to use.
   * @return industryIds
  **/
  @Schema(description = "The ids of the industries to use.")
  public List<Integer> getIndustryIds() {
    return industryIds;
  }

  public void setIndustryIds(List<Integer> industryIds) {
    this.industryIds = industryIds;
  }

  public ScreenerRequest marketCapMin(Double marketCapMin) {
    this.marketCapMin = marketCapMin;
    return this;
  }

   /**
   * The minimum market capitalization.
   * @return marketCapMin
  **/
  @Schema(description = "The minimum market capitalization.")
  public Double getMarketCapMin() {
    return marketCapMin;
  }

  public void setMarketCapMin(Double marketCapMin) {
    this.marketCapMin = marketCapMin;
  }

  public ScreenerRequest marketCapMax(Double marketCapMax) {
    this.marketCapMax = marketCapMax;
    return this;
  }

   /**
   * The maximum market capitalization.
   * @return marketCapMax
  **/
  @Schema(description = "The maximum market capitalization.")
  public Double getMarketCapMax() {
    return marketCapMax;
  }

  public void setMarketCapMax(Double marketCapMax) {
    this.marketCapMax = marketCapMax;
  }

  public ScreenerRequest betaMin(Double betaMin) {
    this.betaMin = betaMin;
    return this;
  }

   /**
   * The minimum price beta for a 5 year period calculated monthly.
   * @return betaMin
  **/
  @Schema(description = "The minimum price beta for a 5 year period calculated monthly.")
  public Double getBetaMin() {
    return betaMin;
  }

  public void setBetaMin(Double betaMin) {
    this.betaMin = betaMin;
  }

  public ScreenerRequest betaMax(Double betaMax) {
    this.betaMax = betaMax;
    return this;
  }

   /**
   * The maximum price beta for a 5 year period calculated monthly.
   * @return betaMax
  **/
  @Schema(description = "The maximum price beta for a 5 year period calculated monthly.")
  public Double getBetaMax() {
    return betaMax;
  }

  public void setBetaMax(Double betaMax) {
    this.betaMax = betaMax;
  }

  public ScreenerRequest forwardDividendMin(Double forwardDividendMin) {
    this.forwardDividendMin = forwardDividendMin;
    return this;
  }

   /**
   * The minimum current dividend value.
   * @return forwardDividendMin
  **/
  @Schema(description = "The minimum current dividend value.")
  public Double getForwardDividendMin() {
    return forwardDividendMin;
  }

  public void setForwardDividendMin(Double forwardDividendMin) {
    this.forwardDividendMin = forwardDividendMin;
  }

  public ScreenerRequest forwardDividendMax(Double forwardDividendMax) {
    this.forwardDividendMax = forwardDividendMax;
    return this;
  }

   /**
   * The maximum current dividend value.
   * @return forwardDividendMax
  **/
  @Schema(description = "The maximum current dividend value.")
  public Double getForwardDividendMax() {
    return forwardDividendMax;
  }

  public void setForwardDividendMax(Double forwardDividendMax) {
    this.forwardDividendMax = forwardDividendMax;
  }

  public ScreenerRequest forwardDividendYieldMin(Double forwardDividendYieldMin) {
    this.forwardDividendYieldMin = forwardDividendYieldMin;
    return this;
  }

   /**
   * The minimum current dividend percentage.
   * @return forwardDividendYieldMin
  **/
  @Schema(description = "The minimum current dividend percentage.")
  public Double getForwardDividendYieldMin() {
    return forwardDividendYieldMin;
  }

  public void setForwardDividendYieldMin(Double forwardDividendYieldMin) {
    this.forwardDividendYieldMin = forwardDividendYieldMin;
  }

  public ScreenerRequest forwardDividendYieldMax(Double forwardDividendYieldMax) {
    this.forwardDividendYieldMax = forwardDividendYieldMax;
    return this;
  }

   /**
   * The maximum current dividend percentage.
   * @return forwardDividendYieldMax
  **/
  @Schema(description = "The maximum current dividend percentage.")
  public Double getForwardDividendYieldMax() {
    return forwardDividendYieldMax;
  }

  public void setForwardDividendYieldMax(Double forwardDividendYieldMax) {
    this.forwardDividendYieldMax = forwardDividendYieldMax;
  }

  public ScreenerRequest shortRatioMin(Double shortRatioMin) {
    this.shortRatioMin = shortRatioMin;
    return this;
  }

   /**
   * The minimum short ratio.
   * @return shortRatioMin
  **/
  @Schema(description = "The minimum short ratio.")
  public Double getShortRatioMin() {
    return shortRatioMin;
  }

  public void setShortRatioMin(Double shortRatioMin) {
    this.shortRatioMin = shortRatioMin;
  }

  public ScreenerRequest shortRatioMax(Double shortRatioMax) {
    this.shortRatioMax = shortRatioMax;
    return this;
  }

   /**
   * The maximum short ratio.
   * @return shortRatioMax
  **/
  @Schema(description = "The maximum short ratio.")
  public Double getShortRatioMax() {
    return shortRatioMax;
  }

  public void setShortRatioMax(Double shortRatioMax) {
    this.shortRatioMax = shortRatioMax;
  }

  public ScreenerRequest sharesShortPercentageMin(Double sharesShortPercentageMin) {
    this.sharesShortPercentageMin = sharesShortPercentageMin;
    return this;
  }

   /**
   * The minimum percentage of shares short.
   * @return sharesShortPercentageMin
  **/
  @Schema(description = "The minimum percentage of shares short.")
  public Double getSharesShortPercentageMin() {
    return sharesShortPercentageMin;
  }

  public void setSharesShortPercentageMin(Double sharesShortPercentageMin) {
    this.sharesShortPercentageMin = sharesShortPercentageMin;
  }

  public ScreenerRequest sharesShortPercentageMax(Double sharesShortPercentageMax) {
    this.sharesShortPercentageMax = sharesShortPercentageMax;
    return this;
  }

   /**
   * The maximum percentage of shares short.
   * @return sharesShortPercentageMax
  **/
  @Schema(description = "The maximum percentage of shares short.")
  public Double getSharesShortPercentageMax() {
    return sharesShortPercentageMax;
  }

  public void setSharesShortPercentageMax(Double sharesShortPercentageMax) {
    this.sharesShortPercentageMax = sharesShortPercentageMax;
  }

  public ScreenerRequest sharesShortPreviousMonthPercentageMin(Double sharesShortPreviousMonthPercentageMin) {
    this.sharesShortPreviousMonthPercentageMin = sharesShortPreviousMonthPercentageMin;
    return this;
  }

   /**
   * The minimum percentage of shares short on the last month.
   * @return sharesShortPreviousMonthPercentageMin
  **/
  @Schema(description = "The minimum percentage of shares short on the last month.")
  public Double getSharesShortPreviousMonthPercentageMin() {
    return sharesShortPreviousMonthPercentageMin;
  }

  public void setSharesShortPreviousMonthPercentageMin(Double sharesShortPreviousMonthPercentageMin) {
    this.sharesShortPreviousMonthPercentageMin = sharesShortPreviousMonthPercentageMin;
  }

  public ScreenerRequest sharesShortPreviousMonthPercentageMax(Double sharesShortPreviousMonthPercentageMax) {
    this.sharesShortPreviousMonthPercentageMax = sharesShortPreviousMonthPercentageMax;
    return this;
  }

   /**
   * The maximum percentage of shares short on the last month.
   * @return sharesShortPreviousMonthPercentageMax
  **/
  @Schema(description = "The maximum percentage of shares short on the last month.")
  public Double getSharesShortPreviousMonthPercentageMax() {
    return sharesShortPreviousMonthPercentageMax;
  }

  public void setSharesShortPreviousMonthPercentageMax(Double sharesShortPreviousMonthPercentageMax) {
    this.sharesShortPreviousMonthPercentageMax = sharesShortPreviousMonthPercentageMax;
  }

  public ScreenerRequest analystRecommendationMin(Recommendation analystRecommendationMin) {
    this.analystRecommendationMin = analystRecommendationMin;
    return this;
  }

   /**
   * Get analystRecommendationMin
   * @return analystRecommendationMin
  **/
  @Schema(description = "")
  public Recommendation getAnalystRecommendationMin() {
    return analystRecommendationMin;
  }

  public void setAnalystRecommendationMin(Recommendation analystRecommendationMin) {
    this.analystRecommendationMin = analystRecommendationMin;
  }

  public ScreenerRequest analystRecommendationMax(Recommendation analystRecommendationMax) {
    this.analystRecommendationMax = analystRecommendationMax;
    return this;
  }

   /**
   * Get analystRecommendationMax
   * @return analystRecommendationMax
  **/
  @Schema(description = "")
  public Recommendation getAnalystRecommendationMax() {
    return analystRecommendationMax;
  }

  public void setAnalystRecommendationMax(Recommendation analystRecommendationMax) {
    this.analystRecommendationMax = analystRecommendationMax;
  }

  public ScreenerRequest performanceOneDayMin(Double performanceOneDayMin) {
    this.performanceOneDayMin = performanceOneDayMin;
    return this;
  }

   /**
   * The minimum stock price percentage change in the last day.
   * @return performanceOneDayMin
  **/
  @Schema(description = "The minimum stock price percentage change in the last day.")
  public Double getPerformanceOneDayMin() {
    return performanceOneDayMin;
  }

  public void setPerformanceOneDayMin(Double performanceOneDayMin) {
    this.performanceOneDayMin = performanceOneDayMin;
  }

  public ScreenerRequest performanceOneDayMax(Double performanceOneDayMax) {
    this.performanceOneDayMax = performanceOneDayMax;
    return this;
  }

   /**
   * The maximum stock price percentage change in the last day.
   * @return performanceOneDayMax
  **/
  @Schema(description = "The maximum stock price percentage change in the last day.")
  public Double getPerformanceOneDayMax() {
    return performanceOneDayMax;
  }

  public void setPerformanceOneDayMax(Double performanceOneDayMax) {
    this.performanceOneDayMax = performanceOneDayMax;
  }

  public ScreenerRequest performanceOneWeekMin(Double performanceOneWeekMin) {
    this.performanceOneWeekMin = performanceOneWeekMin;
    return this;
  }

   /**
   * The minimum stock price percentage change in the last week.
   * @return performanceOneWeekMin
  **/
  @Schema(description = "The minimum stock price percentage change in the last week.")
  public Double getPerformanceOneWeekMin() {
    return performanceOneWeekMin;
  }

  public void setPerformanceOneWeekMin(Double performanceOneWeekMin) {
    this.performanceOneWeekMin = performanceOneWeekMin;
  }

  public ScreenerRequest performanceOneWeekMax(Double performanceOneWeekMax) {
    this.performanceOneWeekMax = performanceOneWeekMax;
    return this;
  }

   /**
   * The maximum stock price percentage change in the last week.
   * @return performanceOneWeekMax
  **/
  @Schema(description = "The maximum stock price percentage change in the last week.")
  public Double getPerformanceOneWeekMax() {
    return performanceOneWeekMax;
  }

  public void setPerformanceOneWeekMax(Double performanceOneWeekMax) {
    this.performanceOneWeekMax = performanceOneWeekMax;
  }

  public ScreenerRequest performanceTwoWeeksMin(Double performanceTwoWeeksMin) {
    this.performanceTwoWeeksMin = performanceTwoWeeksMin;
    return this;
  }

   /**
   * The minimum stock price percentage change in the last two weeks.
   * @return performanceTwoWeeksMin
  **/
  @Schema(description = "The minimum stock price percentage change in the last two weeks.")
  public Double getPerformanceTwoWeeksMin() {
    return performanceTwoWeeksMin;
  }

  public void setPerformanceTwoWeeksMin(Double performanceTwoWeeksMin) {
    this.performanceTwoWeeksMin = performanceTwoWeeksMin;
  }

  public ScreenerRequest performanceTwoWeeksMax(Double performanceTwoWeeksMax) {
    this.performanceTwoWeeksMax = performanceTwoWeeksMax;
    return this;
  }

   /**
   * The maximum stock price percentage change in the last two weeks.
   * @return performanceTwoWeeksMax
  **/
  @Schema(description = "The maximum stock price percentage change in the last two weeks.")
  public Double getPerformanceTwoWeeksMax() {
    return performanceTwoWeeksMax;
  }

  public void setPerformanceTwoWeeksMax(Double performanceTwoWeeksMax) {
    this.performanceTwoWeeksMax = performanceTwoWeeksMax;
  }

  public ScreenerRequest performanceOneMonthMin(Double performanceOneMonthMin) {
    this.performanceOneMonthMin = performanceOneMonthMin;
    return this;
  }

   /**
   * The minimum stock price percentage change in the last month.
   * @return performanceOneMonthMin
  **/
  @Schema(description = "The minimum stock price percentage change in the last month.")
  public Double getPerformanceOneMonthMin() {
    return performanceOneMonthMin;
  }

  public void setPerformanceOneMonthMin(Double performanceOneMonthMin) {
    this.performanceOneMonthMin = performanceOneMonthMin;
  }

  public ScreenerRequest performanceOneMonthMax(Double performanceOneMonthMax) {
    this.performanceOneMonthMax = performanceOneMonthMax;
    return this;
  }

   /**
   * The maximum stock price percentage change in the last month.
   * @return performanceOneMonthMax
  **/
  @Schema(description = "The maximum stock price percentage change in the last month.")
  public Double getPerformanceOneMonthMax() {
    return performanceOneMonthMax;
  }

  public void setPerformanceOneMonthMax(Double performanceOneMonthMax) {
    this.performanceOneMonthMax = performanceOneMonthMax;
  }

  public ScreenerRequest performanceThreeMonthsMin(Double performanceThreeMonthsMin) {
    this.performanceThreeMonthsMin = performanceThreeMonthsMin;
    return this;
  }

   /**
   * The minimum stock price percentage change in the last three months.
   * @return performanceThreeMonthsMin
  **/
  @Schema(description = "The minimum stock price percentage change in the last three months.")
  public Double getPerformanceThreeMonthsMin() {
    return performanceThreeMonthsMin;
  }

  public void setPerformanceThreeMonthsMin(Double performanceThreeMonthsMin) {
    this.performanceThreeMonthsMin = performanceThreeMonthsMin;
  }

  public ScreenerRequest performanceThreeMonthsMax(Double performanceThreeMonthsMax) {
    this.performanceThreeMonthsMax = performanceThreeMonthsMax;
    return this;
  }

   /**
   * The maximum stock price percentage change in the last three months.
   * @return performanceThreeMonthsMax
  **/
  @Schema(description = "The maximum stock price percentage change in the last three months.")
  public Double getPerformanceThreeMonthsMax() {
    return performanceThreeMonthsMax;
  }

  public void setPerformanceThreeMonthsMax(Double performanceThreeMonthsMax) {
    this.performanceThreeMonthsMax = performanceThreeMonthsMax;
  }

  public ScreenerRequest performanceOneYearMin(Double performanceOneYearMin) {
    this.performanceOneYearMin = performanceOneYearMin;
    return this;
  }

   /**
   * The minimum stock price percentage change in the last year.
   * @return performanceOneYearMin
  **/
  @Schema(description = "The minimum stock price percentage change in the last year.")
  public Double getPerformanceOneYearMin() {
    return performanceOneYearMin;
  }

  public void setPerformanceOneYearMin(Double performanceOneYearMin) {
    this.performanceOneYearMin = performanceOneYearMin;
  }

  public ScreenerRequest performanceOneYearMax(Double performanceOneYearMax) {
    this.performanceOneYearMax = performanceOneYearMax;
    return this;
  }

   /**
   * The maximum stock price percentage change in the last year.
   * @return performanceOneYearMax
  **/
  @Schema(description = "The maximum stock price percentage change in the last year.")
  public Double getPerformanceOneYearMax() {
    return performanceOneYearMax;
  }

  public void setPerformanceOneYearMax(Double performanceOneYearMax) {
    this.performanceOneYearMax = performanceOneYearMax;
  }

  public ScreenerRequest performanceThreeYearsMin(Double performanceThreeYearsMin) {
    this.performanceThreeYearsMin = performanceThreeYearsMin;
    return this;
  }

   /**
   * The minimum stock price percentage change in the last three years.
   * @return performanceThreeYearsMin
  **/
  @Schema(description = "The minimum stock price percentage change in the last three years.")
  public Double getPerformanceThreeYearsMin() {
    return performanceThreeYearsMin;
  }

  public void setPerformanceThreeYearsMin(Double performanceThreeYearsMin) {
    this.performanceThreeYearsMin = performanceThreeYearsMin;
  }

  public ScreenerRequest performanceThreeYearsMax(Double performanceThreeYearsMax) {
    this.performanceThreeYearsMax = performanceThreeYearsMax;
    return this;
  }

   /**
   * The maximum stock price percentage change in the last three years.
   * @return performanceThreeYearsMax
  **/
  @Schema(description = "The maximum stock price percentage change in the last three years.")
  public Double getPerformanceThreeYearsMax() {
    return performanceThreeYearsMax;
  }

  public void setPerformanceThreeYearsMax(Double performanceThreeYearsMax) {
    this.performanceThreeYearsMax = performanceThreeYearsMax;
  }

  public ScreenerRequest performanceFiveYearsMin(Double performanceFiveYearsMin) {
    this.performanceFiveYearsMin = performanceFiveYearsMin;
    return this;
  }

   /**
   * The minimum stock price percentage change in the last five years.
   * @return performanceFiveYearsMin
  **/
  @Schema(description = "The minimum stock price percentage change in the last five years.")
  public Double getPerformanceFiveYearsMin() {
    return performanceFiveYearsMin;
  }

  public void setPerformanceFiveYearsMin(Double performanceFiveYearsMin) {
    this.performanceFiveYearsMin = performanceFiveYearsMin;
  }

  public ScreenerRequest performanceFiveYearsMax(Double performanceFiveYearsMax) {
    this.performanceFiveYearsMax = performanceFiveYearsMax;
    return this;
  }

   /**
   * The maximum stock price percentage change in the last five years.
   * @return performanceFiveYearsMax
  **/
  @Schema(description = "The maximum stock price percentage change in the last five years.")
  public Double getPerformanceFiveYearsMax() {
    return performanceFiveYearsMax;
  }

  public void setPerformanceFiveYearsMax(Double performanceFiveYearsMax) {
    this.performanceFiveYearsMax = performanceFiveYearsMax;
  }

  public ScreenerRequest performanceTenYearsMin(Double performanceTenYearsMin) {
    this.performanceTenYearsMin = performanceTenYearsMin;
    return this;
  }

   /**
   * The minimum stock price percentage change in the last ten years.
   * @return performanceTenYearsMin
  **/
  @Schema(description = "The minimum stock price percentage change in the last ten years.")
  public Double getPerformanceTenYearsMin() {
    return performanceTenYearsMin;
  }

  public void setPerformanceTenYearsMin(Double performanceTenYearsMin) {
    this.performanceTenYearsMin = performanceTenYearsMin;
  }

  public ScreenerRequest performanceTenYearsMax(Double performanceTenYearsMax) {
    this.performanceTenYearsMax = performanceTenYearsMax;
    return this;
  }

   /**
   * The maximum stock price percentage change in the last ten years.
   * @return performanceTenYearsMax
  **/
  @Schema(description = "The maximum stock price percentage change in the last ten years.")
  public Double getPerformanceTenYearsMax() {
    return performanceTenYearsMax;
  }

  public void setPerformanceTenYearsMax(Double performanceTenYearsMax) {
    this.performanceTenYearsMax = performanceTenYearsMax;
  }

  public ScreenerRequest performanceTwentyYearsMin(Double performanceTwentyYearsMin) {
    this.performanceTwentyYearsMin = performanceTwentyYearsMin;
    return this;
  }

   /**
   * The minimum stock price percentage change in the last twenty years.
   * @return performanceTwentyYearsMin
  **/
  @Schema(description = "The minimum stock price percentage change in the last twenty years.")
  public Double getPerformanceTwentyYearsMin() {
    return performanceTwentyYearsMin;
  }

  public void setPerformanceTwentyYearsMin(Double performanceTwentyYearsMin) {
    this.performanceTwentyYearsMin = performanceTwentyYearsMin;
  }

  public ScreenerRequest performanceTwentyYearsMax(Double performanceTwentyYearsMax) {
    this.performanceTwentyYearsMax = performanceTwentyYearsMax;
    return this;
  }

   /**
   * The maximum stock price percentage change in the last twenty years.
   * @return performanceTwentyYearsMax
  **/
  @Schema(description = "The maximum stock price percentage change in the last twenty years.")
  public Double getPerformanceTwentyYearsMax() {
    return performanceTwentyYearsMax;
  }

  public void setPerformanceTwentyYearsMax(Double performanceTwentyYearsMax) {
    this.performanceTwentyYearsMax = performanceTwentyYearsMax;
  }

  public ScreenerRequest epsGrowthOneYearMin(Double epsGrowthOneYearMin) {
    this.epsGrowthOneYearMin = epsGrowthOneYearMin;
    return this;
  }

   /**
   * The minimum EPS growth in the last year.
   * @return epsGrowthOneYearMin
  **/
  @Schema(description = "The minimum EPS growth in the last year.")
  public Double getEpsGrowthOneYearMin() {
    return epsGrowthOneYearMin;
  }

  public void setEpsGrowthOneYearMin(Double epsGrowthOneYearMin) {
    this.epsGrowthOneYearMin = epsGrowthOneYearMin;
  }

  public ScreenerRequest epsGrowthOneYearMax(Double epsGrowthOneYearMax) {
    this.epsGrowthOneYearMax = epsGrowthOneYearMax;
    return this;
  }

   /**
   * The maximum EPS growth in the last year.
   * @return epsGrowthOneYearMax
  **/
  @Schema(description = "The maximum EPS growth in the last year.")
  public Double getEpsGrowthOneYearMax() {
    return epsGrowthOneYearMax;
  }

  public void setEpsGrowthOneYearMax(Double epsGrowthOneYearMax) {
    this.epsGrowthOneYearMax = epsGrowthOneYearMax;
  }

  public ScreenerRequest epsGrowthTwoYearsMin(Double epsGrowthTwoYearsMin) {
    this.epsGrowthTwoYearsMin = epsGrowthTwoYearsMin;
    return this;
  }

   /**
   * The minimum EPS growth in the last two years. This value is annualized.
   * @return epsGrowthTwoYearsMin
  **/
  @Schema(description = "The minimum EPS growth in the last two years. This value is annualized.")
  public Double getEpsGrowthTwoYearsMin() {
    return epsGrowthTwoYearsMin;
  }

  public void setEpsGrowthTwoYearsMin(Double epsGrowthTwoYearsMin) {
    this.epsGrowthTwoYearsMin = epsGrowthTwoYearsMin;
  }

  public ScreenerRequest epsGrowthTwoYearsMax(Double epsGrowthTwoYearsMax) {
    this.epsGrowthTwoYearsMax = epsGrowthTwoYearsMax;
    return this;
  }

   /**
   * The maximum EPS growth in the last two years. This value is annualized.
   * @return epsGrowthTwoYearsMax
  **/
  @Schema(description = "The maximum EPS growth in the last two years. This value is annualized.")
  public Double getEpsGrowthTwoYearsMax() {
    return epsGrowthTwoYearsMax;
  }

  public void setEpsGrowthTwoYearsMax(Double epsGrowthTwoYearsMax) {
    this.epsGrowthTwoYearsMax = epsGrowthTwoYearsMax;
  }

  public ScreenerRequest epsGrowthThreeYearsMin(Double epsGrowthThreeYearsMin) {
    this.epsGrowthThreeYearsMin = epsGrowthThreeYearsMin;
    return this;
  }

   /**
   * The minimum EPS growth in the last three years. This value is annualized.
   * @return epsGrowthThreeYearsMin
  **/
  @Schema(description = "The minimum EPS growth in the last three years. This value is annualized.")
  public Double getEpsGrowthThreeYearsMin() {
    return epsGrowthThreeYearsMin;
  }

  public void setEpsGrowthThreeYearsMin(Double epsGrowthThreeYearsMin) {
    this.epsGrowthThreeYearsMin = epsGrowthThreeYearsMin;
  }

  public ScreenerRequest epsGrowthThreeYearsMax(Double epsGrowthThreeYearsMax) {
    this.epsGrowthThreeYearsMax = epsGrowthThreeYearsMax;
    return this;
  }

   /**
   * The maximum EPS growth in the last three years. This value is annualized.
   * @return epsGrowthThreeYearsMax
  **/
  @Schema(description = "The maximum EPS growth in the last three years. This value is annualized.")
  public Double getEpsGrowthThreeYearsMax() {
    return epsGrowthThreeYearsMax;
  }

  public void setEpsGrowthThreeYearsMax(Double epsGrowthThreeYearsMax) {
    this.epsGrowthThreeYearsMax = epsGrowthThreeYearsMax;
  }

  public ScreenerRequest epsGrowthFiveYearsMin(Double epsGrowthFiveYearsMin) {
    this.epsGrowthFiveYearsMin = epsGrowthFiveYearsMin;
    return this;
  }

   /**
   * The minimum EPS growth in the last five years. This value is annualized.
   * @return epsGrowthFiveYearsMin
  **/
  @Schema(description = "The minimum EPS growth in the last five years. This value is annualized.")
  public Double getEpsGrowthFiveYearsMin() {
    return epsGrowthFiveYearsMin;
  }

  public void setEpsGrowthFiveYearsMin(Double epsGrowthFiveYearsMin) {
    this.epsGrowthFiveYearsMin = epsGrowthFiveYearsMin;
  }

  public ScreenerRequest epsGrowthFiveYearsMax(Double epsGrowthFiveYearsMax) {
    this.epsGrowthFiveYearsMax = epsGrowthFiveYearsMax;
    return this;
  }

   /**
   * The maximum EPS growth in the last five years. This value is annualized.
   * @return epsGrowthFiveYearsMax
  **/
  @Schema(description = "The maximum EPS growth in the last five years. This value is annualized.")
  public Double getEpsGrowthFiveYearsMax() {
    return epsGrowthFiveYearsMax;
  }

  public void setEpsGrowthFiveYearsMax(Double epsGrowthFiveYearsMax) {
    this.epsGrowthFiveYearsMax = epsGrowthFiveYearsMax;
  }

  public ScreenerRequest epsGrowthTenYearsMin(Double epsGrowthTenYearsMin) {
    this.epsGrowthTenYearsMin = epsGrowthTenYearsMin;
    return this;
  }

   /**
   * The minimum EPS growth in the last ten years. This value is annualized.
   * @return epsGrowthTenYearsMin
  **/
  @Schema(description = "The minimum EPS growth in the last ten years. This value is annualized.")
  public Double getEpsGrowthTenYearsMin() {
    return epsGrowthTenYearsMin;
  }

  public void setEpsGrowthTenYearsMin(Double epsGrowthTenYearsMin) {
    this.epsGrowthTenYearsMin = epsGrowthTenYearsMin;
  }

  public ScreenerRequest epsGrowthTenYearsMax(Double epsGrowthTenYearsMax) {
    this.epsGrowthTenYearsMax = epsGrowthTenYearsMax;
    return this;
  }

   /**
   * The maximum EPS growth in the last ten years. This value is annualized.
   * @return epsGrowthTenYearsMax
  **/
  @Schema(description = "The maximum EPS growth in the last ten years. This value is annualized.")
  public Double getEpsGrowthTenYearsMax() {
    return epsGrowthTenYearsMax;
  }

  public void setEpsGrowthTenYearsMax(Double epsGrowthTenYearsMax) {
    this.epsGrowthTenYearsMax = epsGrowthTenYearsMax;
  }

  public ScreenerRequest epsGrowthTwentyYearsMin(Double epsGrowthTwentyYearsMin) {
    this.epsGrowthTwentyYearsMin = epsGrowthTwentyYearsMin;
    return this;
  }

   /**
   * The minimum EPS growth in the last twenty years. This value is annualized.
   * @return epsGrowthTwentyYearsMin
  **/
  @Schema(description = "The minimum EPS growth in the last twenty years. This value is annualized.")
  public Double getEpsGrowthTwentyYearsMin() {
    return epsGrowthTwentyYearsMin;
  }

  public void setEpsGrowthTwentyYearsMin(Double epsGrowthTwentyYearsMin) {
    this.epsGrowthTwentyYearsMin = epsGrowthTwentyYearsMin;
  }

  public ScreenerRequest epsGrowthTwentyYearsMax(Double epsGrowthTwentyYearsMax) {
    this.epsGrowthTwentyYearsMax = epsGrowthTwentyYearsMax;
    return this;
  }

   /**
   * The maximum EPS growth in the last twenty years. This value is annualized.
   * @return epsGrowthTwentyYearsMax
  **/
  @Schema(description = "The maximum EPS growth in the last twenty years. This value is annualized.")
  public Double getEpsGrowthTwentyYearsMax() {
    return epsGrowthTwentyYearsMax;
  }

  public void setEpsGrowthTwentyYearsMax(Double epsGrowthTwentyYearsMax) {
    this.epsGrowthTwentyYearsMax = epsGrowthTwentyYearsMax;
  }

  public ScreenerRequest peMin(Double peMin) {
    this.peMin = peMin;
    return this;
  }

   /**
   * The minimum price to earnings value.
   * @return peMin
  **/
  @Schema(description = "The minimum price to earnings value.")
  public Double getPeMin() {
    return peMin;
  }

  public void setPeMin(Double peMin) {
    this.peMin = peMin;
  }

  public ScreenerRequest peMax(Double peMax) {
    this.peMax = peMax;
    return this;
  }

   /**
   * The maximum price to earnings value.
   * @return peMax
  **/
  @Schema(description = "The maximum price to earnings value.")
  public Double getPeMax() {
    return peMax;
  }

  public void setPeMax(Double peMax) {
    this.peMax = peMax;
  }

  public ScreenerRequest pegMin(Double pegMin) {
    this.pegMin = pegMin;
    return this;
  }

   /**
   * The minimum price to earnings to growth value.
   * @return pegMin
  **/
  @Schema(description = "The minimum price to earnings to growth value.")
  public Double getPegMin() {
    return pegMin;
  }

  public void setPegMin(Double pegMin) {
    this.pegMin = pegMin;
  }

  public ScreenerRequest pegMax(Double pegMax) {
    this.pegMax = pegMax;
    return this;
  }

   /**
   * The maximum price to earnings to growth value.
   * @return pegMax
  **/
  @Schema(description = "The maximum price to earnings to growth value.")
  public Double getPegMax() {
    return pegMax;
  }

  public void setPegMax(Double pegMax) {
    this.pegMax = pegMax;
  }

  public ScreenerRequest priceFcfMin(Double priceFcfMin) {
    this.priceFcfMin = priceFcfMin;
    return this;
  }

   /**
   * The minimum price to free cash flow value.
   * @return priceFcfMin
  **/
  @Schema(description = "The minimum price to free cash flow value.")
  public Double getPriceFcfMin() {
    return priceFcfMin;
  }

  public void setPriceFcfMin(Double priceFcfMin) {
    this.priceFcfMin = priceFcfMin;
  }

  public ScreenerRequest priceFcfMax(Double priceFcfMax) {
    this.priceFcfMax = priceFcfMax;
    return this;
  }

   /**
   * The maximum price to free cash flow value.
   * @return priceFcfMax
  **/
  @Schema(description = "The maximum price to free cash flow value.")
  public Double getPriceFcfMax() {
    return priceFcfMax;
  }

  public void setPriceFcfMax(Double priceFcfMax) {
    this.priceFcfMax = priceFcfMax;
  }

  public ScreenerRequest bookValuePerShareMin(Double bookValuePerShareMin) {
    this.bookValuePerShareMin = bookValuePerShareMin;
    return this;
  }

   /**
   * The minimum book value per share.
   * @return bookValuePerShareMin
  **/
  @Schema(description = "The minimum book value per share.")
  public Double getBookValuePerShareMin() {
    return bookValuePerShareMin;
  }

  public void setBookValuePerShareMin(Double bookValuePerShareMin) {
    this.bookValuePerShareMin = bookValuePerShareMin;
  }

  public ScreenerRequest bookValuePerShareMax(Double bookValuePerShareMax) {
    this.bookValuePerShareMax = bookValuePerShareMax;
    return this;
  }

   /**
   * The maximum book value per share.
   * @return bookValuePerShareMax
  **/
  @Schema(description = "The maximum book value per share.")
  public Double getBookValuePerShareMax() {
    return bookValuePerShareMax;
  }

  public void setBookValuePerShareMax(Double bookValuePerShareMax) {
    this.bookValuePerShareMax = bookValuePerShareMax;
  }

  public ScreenerRequest priceBookValuePerShareMin(Double priceBookValuePerShareMin) {
    this.priceBookValuePerShareMin = priceBookValuePerShareMin;
    return this;
  }

   /**
   * The minimum price to book value.
   * @return priceBookValuePerShareMin
  **/
  @Schema(description = "The minimum price to book value.")
  public Double getPriceBookValuePerShareMin() {
    return priceBookValuePerShareMin;
  }

  public void setPriceBookValuePerShareMin(Double priceBookValuePerShareMin) {
    this.priceBookValuePerShareMin = priceBookValuePerShareMin;
  }

  public ScreenerRequest priceBookValuePerShareMax(Double priceBookValuePerShareMax) {
    this.priceBookValuePerShareMax = priceBookValuePerShareMax;
    return this;
  }

   /**
   * The maximum price to book value.
   * @return priceBookValuePerShareMax
  **/
  @Schema(description = "The maximum price to book value.")
  public Double getPriceBookValuePerShareMax() {
    return priceBookValuePerShareMax;
  }

  public void setPriceBookValuePerShareMax(Double priceBookValuePerShareMax) {
    this.priceBookValuePerShareMax = priceBookValuePerShareMax;
  }

  public ScreenerRequest payoutMin(Double payoutMin) {
    this.payoutMin = payoutMin;
    return this;
  }

   /**
   * The minimum payout ratio (as percentage).
   * @return payoutMin
  **/
  @Schema(description = "The minimum payout ratio (as percentage).")
  public Double getPayoutMin() {
    return payoutMin;
  }

  public void setPayoutMin(Double payoutMin) {
    this.payoutMin = payoutMin;
  }

  public ScreenerRequest payoutMax(Double payoutMax) {
    this.payoutMax = payoutMax;
    return this;
  }

   /**
   * The maximum payout ratio (as percentage).
   * @return payoutMax
  **/
  @Schema(description = "The maximum payout ratio (as percentage).")
  public Double getPayoutMax() {
    return payoutMax;
  }

  public void setPayoutMax(Double payoutMax) {
    this.payoutMax = payoutMax;
  }

  public ScreenerRequest debtToEquityMin(Double debtToEquityMin) {
    this.debtToEquityMin = debtToEquityMin;
    return this;
  }

   /**
   * The minimum debt to equity ratio (as percentage).
   * @return debtToEquityMin
  **/
  @Schema(description = "The minimum debt to equity ratio (as percentage).")
  public Double getDebtToEquityMin() {
    return debtToEquityMin;
  }

  public void setDebtToEquityMin(Double debtToEquityMin) {
    this.debtToEquityMin = debtToEquityMin;
  }

  public ScreenerRequest debtToEquityMax(Double debtToEquityMax) {
    this.debtToEquityMax = debtToEquityMax;
    return this;
  }

   /**
   * The maximum debt to equity ratio (as percentage).
   * @return debtToEquityMax
  **/
  @Schema(description = "The maximum debt to equity ratio (as percentage).")
  public Double getDebtToEquityMax() {
    return debtToEquityMax;
  }

  public void setDebtToEquityMax(Double debtToEquityMax) {
    this.debtToEquityMax = debtToEquityMax;
  }

  public ScreenerRequest grossMarginMin(Double grossMarginMin) {
    this.grossMarginMin = grossMarginMin;
    return this;
  }

   /**
   * The minimum gross margin (as percentage).
   * @return grossMarginMin
  **/
  @Schema(description = "The minimum gross margin (as percentage).")
  public Double getGrossMarginMin() {
    return grossMarginMin;
  }

  public void setGrossMarginMin(Double grossMarginMin) {
    this.grossMarginMin = grossMarginMin;
  }

  public ScreenerRequest grossMarginMax(Double grossMarginMax) {
    this.grossMarginMax = grossMarginMax;
    return this;
  }

   /**
   * The maximum gross margin (as percentage).
   * @return grossMarginMax
  **/
  @Schema(description = "The maximum gross margin (as percentage).")
  public Double getGrossMarginMax() {
    return grossMarginMax;
  }

  public void setGrossMarginMax(Double grossMarginMax) {
    this.grossMarginMax = grossMarginMax;
  }

  public ScreenerRequest operatingMarginMin(Double operatingMarginMin) {
    this.operatingMarginMin = operatingMarginMin;
    return this;
  }

   /**
   * The minimum operating margin (as percentage).
   * @return operatingMarginMin
  **/
  @Schema(description = "The minimum operating margin (as percentage).")
  public Double getOperatingMarginMin() {
    return operatingMarginMin;
  }

  public void setOperatingMarginMin(Double operatingMarginMin) {
    this.operatingMarginMin = operatingMarginMin;
  }

  public ScreenerRequest operatingMarginMax(Double operatingMarginMax) {
    this.operatingMarginMax = operatingMarginMax;
    return this;
  }

   /**
   * The maximum operating margin (as percentage).
   * @return operatingMarginMax
  **/
  @Schema(description = "The maximum operating margin (as percentage).")
  public Double getOperatingMarginMax() {
    return operatingMarginMax;
  }

  public void setOperatingMarginMax(Double operatingMarginMax) {
    this.operatingMarginMax = operatingMarginMax;
  }

  public ScreenerRequest profitMarginMin(Double profitMarginMin) {
    this.profitMarginMin = profitMarginMin;
    return this;
  }

   /**
   * The minimum profit margin (as percentage).
   * @return profitMarginMin
  **/
  @Schema(description = "The minimum profit margin (as percentage).")
  public Double getProfitMarginMin() {
    return profitMarginMin;
  }

  public void setProfitMarginMin(Double profitMarginMin) {
    this.profitMarginMin = profitMarginMin;
  }

  public ScreenerRequest profitMarginMax(Double profitMarginMax) {
    this.profitMarginMax = profitMarginMax;
    return this;
  }

   /**
   * The maximum profit margin (as percentage).
   * @return profitMarginMax
  **/
  @Schema(description = "The maximum profit margin (as percentage).")
  public Double getProfitMarginMax() {
    return profitMarginMax;
  }

  public void setProfitMarginMax(Double profitMarginMax) {
    this.profitMarginMax = profitMarginMax;
  }

  public ScreenerRequest priceToSalesMin(Double priceToSalesMin) {
    this.priceToSalesMin = priceToSalesMin;
    return this;
  }

   /**
   * The minimum price to sales ratio.
   * @return priceToSalesMin
  **/
  @Schema(description = "The minimum price to sales ratio.")
  public Double getPriceToSalesMin() {
    return priceToSalesMin;
  }

  public void setPriceToSalesMin(Double priceToSalesMin) {
    this.priceToSalesMin = priceToSalesMin;
  }

  public ScreenerRequest priceToSalesMax(Double priceToSalesMax) {
    this.priceToSalesMax = priceToSalesMax;
    return this;
  }

   /**
   * The maximum price to sales ratio.
   * @return priceToSalesMax
  **/
  @Schema(description = "The maximum price to sales ratio.")
  public Double getPriceToSalesMax() {
    return priceToSalesMax;
  }

  public void setPriceToSalesMax(Double priceToSalesMax) {
    this.priceToSalesMax = priceToSalesMax;
  }

  public ScreenerRequest buybacksThreeMonthsMin(Double buybacksThreeMonthsMin) {
    this.buybacksThreeMonthsMin = buybacksThreeMonthsMin;
    return this;
  }

   /**
   * The minimum percentage of shares bought back in the last 3 months. Negative values represent dilution of shares.
   * @return buybacksThreeMonthsMin
  **/
  @Schema(description = "The minimum percentage of shares bought back in the last 3 months. Negative values represent dilution of shares.")
  public Double getBuybacksThreeMonthsMin() {
    return buybacksThreeMonthsMin;
  }

  public void setBuybacksThreeMonthsMin(Double buybacksThreeMonthsMin) {
    this.buybacksThreeMonthsMin = buybacksThreeMonthsMin;
  }

  public ScreenerRequest buybacksThreeMonthsMax(Double buybacksThreeMonthsMax) {
    this.buybacksThreeMonthsMax = buybacksThreeMonthsMax;
    return this;
  }

   /**
   * The maximum percentage of shares bought back in the last 3 months. Negative values represent dilution of shares.
   * @return buybacksThreeMonthsMax
  **/
  @Schema(description = "The maximum percentage of shares bought back in the last 3 months. Negative values represent dilution of shares.")
  public Double getBuybacksThreeMonthsMax() {
    return buybacksThreeMonthsMax;
  }

  public void setBuybacksThreeMonthsMax(Double buybacksThreeMonthsMax) {
    this.buybacksThreeMonthsMax = buybacksThreeMonthsMax;
  }

  public ScreenerRequest buybacksSixMonthsMin(Double buybacksSixMonthsMin) {
    this.buybacksSixMonthsMin = buybacksSixMonthsMin;
    return this;
  }

   /**
   * The minimum percentage of shares bought back in the last 6 months. Negative values represent dilution of shares.
   * @return buybacksSixMonthsMin
  **/
  @Schema(description = "The minimum percentage of shares bought back in the last 6 months. Negative values represent dilution of shares.")
  public Double getBuybacksSixMonthsMin() {
    return buybacksSixMonthsMin;
  }

  public void setBuybacksSixMonthsMin(Double buybacksSixMonthsMin) {
    this.buybacksSixMonthsMin = buybacksSixMonthsMin;
  }

  public ScreenerRequest buybacksSixMonthsMax(Double buybacksSixMonthsMax) {
    this.buybacksSixMonthsMax = buybacksSixMonthsMax;
    return this;
  }

   /**
   * Get buybacksSixMonthsMax
   * @return buybacksSixMonthsMax
  **/
  @Schema(description = "")
  public Double getBuybacksSixMonthsMax() {
    return buybacksSixMonthsMax;
  }

  public void setBuybacksSixMonthsMax(Double buybacksSixMonthsMax) {
    this.buybacksSixMonthsMax = buybacksSixMonthsMax;
  }

  public ScreenerRequest buybacksOneYearMin(Double buybacksOneYearMin) {
    this.buybacksOneYearMin = buybacksOneYearMin;
    return this;
  }

   /**
   * The minimum percentage of shares bought back in the last year. Negative values represent dilution of shares.
   * @return buybacksOneYearMin
  **/
  @Schema(description = "The minimum percentage of shares bought back in the last year. Negative values represent dilution of shares.")
  public Double getBuybacksOneYearMin() {
    return buybacksOneYearMin;
  }

  public void setBuybacksOneYearMin(Double buybacksOneYearMin) {
    this.buybacksOneYearMin = buybacksOneYearMin;
  }

  public ScreenerRequest buybacksOneYearMax(Double buybacksOneYearMax) {
    this.buybacksOneYearMax = buybacksOneYearMax;
    return this;
  }

   /**
   * The maximum percentage of shares bought back in the last year. Negative values represent dilution of shares.
   * @return buybacksOneYearMax
  **/
  @Schema(description = "The maximum percentage of shares bought back in the last year. Negative values represent dilution of shares.")
  public Double getBuybacksOneYearMax() {
    return buybacksOneYearMax;
  }

  public void setBuybacksOneYearMax(Double buybacksOneYearMax) {
    this.buybacksOneYearMax = buybacksOneYearMax;
  }

  public ScreenerRequest buybacksTwoYearsMin(Double buybacksTwoYearsMin) {
    this.buybacksTwoYearsMin = buybacksTwoYearsMin;
    return this;
  }

   /**
   * The minimum percentage of shares bought back in the last 2 years. Negative values represent dilution of shares.
   * @return buybacksTwoYearsMin
  **/
  @Schema(description = "The minimum percentage of shares bought back in the last 2 years. Negative values represent dilution of shares.")
  public Double getBuybacksTwoYearsMin() {
    return buybacksTwoYearsMin;
  }

  public void setBuybacksTwoYearsMin(Double buybacksTwoYearsMin) {
    this.buybacksTwoYearsMin = buybacksTwoYearsMin;
  }

  public ScreenerRequest buybacksTwoYearsMax(Double buybacksTwoYearsMax) {
    this.buybacksTwoYearsMax = buybacksTwoYearsMax;
    return this;
  }

   /**
   * The maximum percentage of shares bought back in the last 2 years. Negative values represent dilution of shares.
   * @return buybacksTwoYearsMax
  **/
  @Schema(description = "The maximum percentage of shares bought back in the last 2 years. Negative values represent dilution of shares.")
  public Double getBuybacksTwoYearsMax() {
    return buybacksTwoYearsMax;
  }

  public void setBuybacksTwoYearsMax(Double buybacksTwoYearsMax) {
    this.buybacksTwoYearsMax = buybacksTwoYearsMax;
  }

  public ScreenerRequest buybacksThreeYearsMin(Double buybacksThreeYearsMin) {
    this.buybacksThreeYearsMin = buybacksThreeYearsMin;
    return this;
  }

   /**
   * The minimum percentage of shares bought back in the last 3 years. Negative values represent dilution of shares.
   * @return buybacksThreeYearsMin
  **/
  @Schema(description = "The minimum percentage of shares bought back in the last 3 years. Negative values represent dilution of shares.")
  public Double getBuybacksThreeYearsMin() {
    return buybacksThreeYearsMin;
  }

  public void setBuybacksThreeYearsMin(Double buybacksThreeYearsMin) {
    this.buybacksThreeYearsMin = buybacksThreeYearsMin;
  }

  public ScreenerRequest buybacksThreeYearsMax(Double buybacksThreeYearsMax) {
    this.buybacksThreeYearsMax = buybacksThreeYearsMax;
    return this;
  }

   /**
   * The maximum percentage of shares bought back in the last 3 years. Negative values represent dilution of shares.
   * @return buybacksThreeYearsMax
  **/
  @Schema(description = "The maximum percentage of shares bought back in the last 3 years. Negative values represent dilution of shares.")
  public Double getBuybacksThreeYearsMax() {
    return buybacksThreeYearsMax;
  }

  public void setBuybacksThreeYearsMax(Double buybacksThreeYearsMax) {
    this.buybacksThreeYearsMax = buybacksThreeYearsMax;
  }

  public ScreenerRequest buybacksFiveYearsMin(Double buybacksFiveYearsMin) {
    this.buybacksFiveYearsMin = buybacksFiveYearsMin;
    return this;
  }

   /**
   * The minimum percentage of shares bought back in the last 5 years. Negative values represent dilution of shares.
   * @return buybacksFiveYearsMin
  **/
  @Schema(description = "The minimum percentage of shares bought back in the last 5 years. Negative values represent dilution of shares.")
  public Double getBuybacksFiveYearsMin() {
    return buybacksFiveYearsMin;
  }

  public void setBuybacksFiveYearsMin(Double buybacksFiveYearsMin) {
    this.buybacksFiveYearsMin = buybacksFiveYearsMin;
  }

  public ScreenerRequest buybacksFiveYearsMax(Double buybacksFiveYearsMax) {
    this.buybacksFiveYearsMax = buybacksFiveYearsMax;
    return this;
  }

   /**
   * The maximum percentage of shares bought back in the last 5 years. Negative values represent dilution of shares.
   * @return buybacksFiveYearsMax
  **/
  @Schema(description = "The maximum percentage of shares bought back in the last 5 years. Negative values represent dilution of shares.")
  public Double getBuybacksFiveYearsMax() {
    return buybacksFiveYearsMax;
  }

  public void setBuybacksFiveYearsMax(Double buybacksFiveYearsMax) {
    this.buybacksFiveYearsMax = buybacksFiveYearsMax;
  }

  public ScreenerRequest buybacksTenYearsMin(Double buybacksTenYearsMin) {
    this.buybacksTenYearsMin = buybacksTenYearsMin;
    return this;
  }

   /**
   * The minimum percentage of shares bought back in the last 10 years. Negative values represent dilution of shares.
   * @return buybacksTenYearsMin
  **/
  @Schema(description = "The minimum percentage of shares bought back in the last 10 years. Negative values represent dilution of shares.")
  public Double getBuybacksTenYearsMin() {
    return buybacksTenYearsMin;
  }

  public void setBuybacksTenYearsMin(Double buybacksTenYearsMin) {
    this.buybacksTenYearsMin = buybacksTenYearsMin;
  }

  public ScreenerRequest buybacksTenYearsMax(Double buybacksTenYearsMax) {
    this.buybacksTenYearsMax = buybacksTenYearsMax;
    return this;
  }

   /**
   * The maximum percentage of shares bought back in the last 10 years. Negative values represent dilution of shares.
   * @return buybacksTenYearsMax
  **/
  @Schema(description = "The maximum percentage of shares bought back in the last 10 years. Negative values represent dilution of shares.")
  public Double getBuybacksTenYearsMax() {
    return buybacksTenYearsMax;
  }

  public void setBuybacksTenYearsMax(Double buybacksTenYearsMax) {
    this.buybacksTenYearsMax = buybacksTenYearsMax;
  }

  public ScreenerRequest buybacksTwentyYearsMin(Double buybacksTwentyYearsMin) {
    this.buybacksTwentyYearsMin = buybacksTwentyYearsMin;
    return this;
  }

   /**
   * The minimum percentage of shares bought back in the last 20 years. Negative values represent dilution of shares.
   * @return buybacksTwentyYearsMin
  **/
  @Schema(description = "The minimum percentage of shares bought back in the last 20 years. Negative values represent dilution of shares.")
  public Double getBuybacksTwentyYearsMin() {
    return buybacksTwentyYearsMin;
  }

  public void setBuybacksTwentyYearsMin(Double buybacksTwentyYearsMin) {
    this.buybacksTwentyYearsMin = buybacksTwentyYearsMin;
  }

  public ScreenerRequest buybacksTwentyYearsMax(Double buybacksTwentyYearsMax) {
    this.buybacksTwentyYearsMax = buybacksTwentyYearsMax;
    return this;
  }

   /**
   * The maximum percentage of shares bought back in the last 20 years. Negative values represent dilution of shares.
   * @return buybacksTwentyYearsMax
  **/
  @Schema(description = "The maximum percentage of shares bought back in the last 20 years. Negative values represent dilution of shares.")
  public Double getBuybacksTwentyYearsMax() {
    return buybacksTwentyYearsMax;
  }

  public void setBuybacksTwentyYearsMax(Double buybacksTwentyYearsMax) {
    this.buybacksTwentyYearsMax = buybacksTwentyYearsMax;
  }

  public ScreenerRequest potentialUpside(Double potentialUpside) {
    this.potentialUpside = potentialUpside;
    return this;
  }

   /**
   * The upside potential according to the analysts&#x27; target price consensus (as percentage). I.e. If the stock price is $100 and the analysts&#x27; target price consensus is $150 then the potential upside is 50%.
   * @return potentialUpside
  **/
  @Schema(description = "The upside potential according to the analysts' target price consensus (as percentage). I.e. If the stock price is $100 and the analysts' target price consensus is $150 then the potential upside is 50%.")
  public Double getPotentialUpside() {
    return potentialUpside;
  }

  public void setPotentialUpside(Double potentialUpside) {
    this.potentialUpside = potentialUpside;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScreenerRequest screenerRequest = (ScreenerRequest) o;
    return Objects.equals(this.searchQuery, screenerRequest.searchQuery) &&
        Objects.equals(this.exchangeIds, screenerRequest.exchangeIds) &&
        Objects.equals(this.sectorIds, screenerRequest.sectorIds) &&
        Objects.equals(this.industryIds, screenerRequest.industryIds) &&
        Objects.equals(this.marketCapMin, screenerRequest.marketCapMin) &&
        Objects.equals(this.marketCapMax, screenerRequest.marketCapMax) &&
        Objects.equals(this.betaMin, screenerRequest.betaMin) &&
        Objects.equals(this.betaMax, screenerRequest.betaMax) &&
        Objects.equals(this.forwardDividendMin, screenerRequest.forwardDividendMin) &&
        Objects.equals(this.forwardDividendMax, screenerRequest.forwardDividendMax) &&
        Objects.equals(this.forwardDividendYieldMin, screenerRequest.forwardDividendYieldMin) &&
        Objects.equals(this.forwardDividendYieldMax, screenerRequest.forwardDividendYieldMax) &&
        Objects.equals(this.shortRatioMin, screenerRequest.shortRatioMin) &&
        Objects.equals(this.shortRatioMax, screenerRequest.shortRatioMax) &&
        Objects.equals(this.sharesShortPercentageMin, screenerRequest.sharesShortPercentageMin) &&
        Objects.equals(this.sharesShortPercentageMax, screenerRequest.sharesShortPercentageMax) &&
        Objects.equals(this.sharesShortPreviousMonthPercentageMin, screenerRequest.sharesShortPreviousMonthPercentageMin) &&
        Objects.equals(this.sharesShortPreviousMonthPercentageMax, screenerRequest.sharesShortPreviousMonthPercentageMax) &&
        Objects.equals(this.analystRecommendationMin, screenerRequest.analystRecommendationMin) &&
        Objects.equals(this.analystRecommendationMax, screenerRequest.analystRecommendationMax) &&
        Objects.equals(this.performanceOneDayMin, screenerRequest.performanceOneDayMin) &&
        Objects.equals(this.performanceOneDayMax, screenerRequest.performanceOneDayMax) &&
        Objects.equals(this.performanceOneWeekMin, screenerRequest.performanceOneWeekMin) &&
        Objects.equals(this.performanceOneWeekMax, screenerRequest.performanceOneWeekMax) &&
        Objects.equals(this.performanceTwoWeeksMin, screenerRequest.performanceTwoWeeksMin) &&
        Objects.equals(this.performanceTwoWeeksMax, screenerRequest.performanceTwoWeeksMax) &&
        Objects.equals(this.performanceOneMonthMin, screenerRequest.performanceOneMonthMin) &&
        Objects.equals(this.performanceOneMonthMax, screenerRequest.performanceOneMonthMax) &&
        Objects.equals(this.performanceThreeMonthsMin, screenerRequest.performanceThreeMonthsMin) &&
        Objects.equals(this.performanceThreeMonthsMax, screenerRequest.performanceThreeMonthsMax) &&
        Objects.equals(this.performanceOneYearMin, screenerRequest.performanceOneYearMin) &&
        Objects.equals(this.performanceOneYearMax, screenerRequest.performanceOneYearMax) &&
        Objects.equals(this.performanceThreeYearsMin, screenerRequest.performanceThreeYearsMin) &&
        Objects.equals(this.performanceThreeYearsMax, screenerRequest.performanceThreeYearsMax) &&
        Objects.equals(this.performanceFiveYearsMin, screenerRequest.performanceFiveYearsMin) &&
        Objects.equals(this.performanceFiveYearsMax, screenerRequest.performanceFiveYearsMax) &&
        Objects.equals(this.performanceTenYearsMin, screenerRequest.performanceTenYearsMin) &&
        Objects.equals(this.performanceTenYearsMax, screenerRequest.performanceTenYearsMax) &&
        Objects.equals(this.performanceTwentyYearsMin, screenerRequest.performanceTwentyYearsMin) &&
        Objects.equals(this.performanceTwentyYearsMax, screenerRequest.performanceTwentyYearsMax) &&
        Objects.equals(this.epsGrowthOneYearMin, screenerRequest.epsGrowthOneYearMin) &&
        Objects.equals(this.epsGrowthOneYearMax, screenerRequest.epsGrowthOneYearMax) &&
        Objects.equals(this.epsGrowthTwoYearsMin, screenerRequest.epsGrowthTwoYearsMin) &&
        Objects.equals(this.epsGrowthTwoYearsMax, screenerRequest.epsGrowthTwoYearsMax) &&
        Objects.equals(this.epsGrowthThreeYearsMin, screenerRequest.epsGrowthThreeYearsMin) &&
        Objects.equals(this.epsGrowthThreeYearsMax, screenerRequest.epsGrowthThreeYearsMax) &&
        Objects.equals(this.epsGrowthFiveYearsMin, screenerRequest.epsGrowthFiveYearsMin) &&
        Objects.equals(this.epsGrowthFiveYearsMax, screenerRequest.epsGrowthFiveYearsMax) &&
        Objects.equals(this.epsGrowthTenYearsMin, screenerRequest.epsGrowthTenYearsMin) &&
        Objects.equals(this.epsGrowthTenYearsMax, screenerRequest.epsGrowthTenYearsMax) &&
        Objects.equals(this.epsGrowthTwentyYearsMin, screenerRequest.epsGrowthTwentyYearsMin) &&
        Objects.equals(this.epsGrowthTwentyYearsMax, screenerRequest.epsGrowthTwentyYearsMax) &&
        Objects.equals(this.peMin, screenerRequest.peMin) &&
        Objects.equals(this.peMax, screenerRequest.peMax) &&
        Objects.equals(this.pegMin, screenerRequest.pegMin) &&
        Objects.equals(this.pegMax, screenerRequest.pegMax) &&
        Objects.equals(this.priceFcfMin, screenerRequest.priceFcfMin) &&
        Objects.equals(this.priceFcfMax, screenerRequest.priceFcfMax) &&
        Objects.equals(this.bookValuePerShareMin, screenerRequest.bookValuePerShareMin) &&
        Objects.equals(this.bookValuePerShareMax, screenerRequest.bookValuePerShareMax) &&
        Objects.equals(this.priceBookValuePerShareMin, screenerRequest.priceBookValuePerShareMin) &&
        Objects.equals(this.priceBookValuePerShareMax, screenerRequest.priceBookValuePerShareMax) &&
        Objects.equals(this.payoutMin, screenerRequest.payoutMin) &&
        Objects.equals(this.payoutMax, screenerRequest.payoutMax) &&
        Objects.equals(this.debtToEquityMin, screenerRequest.debtToEquityMin) &&
        Objects.equals(this.debtToEquityMax, screenerRequest.debtToEquityMax) &&
        Objects.equals(this.grossMarginMin, screenerRequest.grossMarginMin) &&
        Objects.equals(this.grossMarginMax, screenerRequest.grossMarginMax) &&
        Objects.equals(this.operatingMarginMin, screenerRequest.operatingMarginMin) &&
        Objects.equals(this.operatingMarginMax, screenerRequest.operatingMarginMax) &&
        Objects.equals(this.profitMarginMin, screenerRequest.profitMarginMin) &&
        Objects.equals(this.profitMarginMax, screenerRequest.profitMarginMax) &&
        Objects.equals(this.priceToSalesMin, screenerRequest.priceToSalesMin) &&
        Objects.equals(this.priceToSalesMax, screenerRequest.priceToSalesMax) &&
        Objects.equals(this.buybacksThreeMonthsMin, screenerRequest.buybacksThreeMonthsMin) &&
        Objects.equals(this.buybacksThreeMonthsMax, screenerRequest.buybacksThreeMonthsMax) &&
        Objects.equals(this.buybacksSixMonthsMin, screenerRequest.buybacksSixMonthsMin) &&
        Objects.equals(this.buybacksSixMonthsMax, screenerRequest.buybacksSixMonthsMax) &&
        Objects.equals(this.buybacksOneYearMin, screenerRequest.buybacksOneYearMin) &&
        Objects.equals(this.buybacksOneYearMax, screenerRequest.buybacksOneYearMax) &&
        Objects.equals(this.buybacksTwoYearsMin, screenerRequest.buybacksTwoYearsMin) &&
        Objects.equals(this.buybacksTwoYearsMax, screenerRequest.buybacksTwoYearsMax) &&
        Objects.equals(this.buybacksThreeYearsMin, screenerRequest.buybacksThreeYearsMin) &&
        Objects.equals(this.buybacksThreeYearsMax, screenerRequest.buybacksThreeYearsMax) &&
        Objects.equals(this.buybacksFiveYearsMin, screenerRequest.buybacksFiveYearsMin) &&
        Objects.equals(this.buybacksFiveYearsMax, screenerRequest.buybacksFiveYearsMax) &&
        Objects.equals(this.buybacksTenYearsMin, screenerRequest.buybacksTenYearsMin) &&
        Objects.equals(this.buybacksTenYearsMax, screenerRequest.buybacksTenYearsMax) &&
        Objects.equals(this.buybacksTwentyYearsMin, screenerRequest.buybacksTwentyYearsMin) &&
        Objects.equals(this.buybacksTwentyYearsMax, screenerRequest.buybacksTwentyYearsMax) &&
        Objects.equals(this.potentialUpside, screenerRequest.potentialUpside);
  }

  @Override
  public int hashCode() {
    return Objects.hash(searchQuery, exchangeIds, sectorIds, industryIds, marketCapMin, marketCapMax, betaMin, betaMax, forwardDividendMin, forwardDividendMax, forwardDividendYieldMin, forwardDividendYieldMax, shortRatioMin, shortRatioMax, sharesShortPercentageMin, sharesShortPercentageMax, sharesShortPreviousMonthPercentageMin, sharesShortPreviousMonthPercentageMax, analystRecommendationMin, analystRecommendationMax, performanceOneDayMin, performanceOneDayMax, performanceOneWeekMin, performanceOneWeekMax, performanceTwoWeeksMin, performanceTwoWeeksMax, performanceOneMonthMin, performanceOneMonthMax, performanceThreeMonthsMin, performanceThreeMonthsMax, performanceOneYearMin, performanceOneYearMax, performanceThreeYearsMin, performanceThreeYearsMax, performanceFiveYearsMin, performanceFiveYearsMax, performanceTenYearsMin, performanceTenYearsMax, performanceTwentyYearsMin, performanceTwentyYearsMax, epsGrowthOneYearMin, epsGrowthOneYearMax, epsGrowthTwoYearsMin, epsGrowthTwoYearsMax, epsGrowthThreeYearsMin, epsGrowthThreeYearsMax, epsGrowthFiveYearsMin, epsGrowthFiveYearsMax, epsGrowthTenYearsMin, epsGrowthTenYearsMax, epsGrowthTwentyYearsMin, epsGrowthTwentyYearsMax, peMin, peMax, pegMin, pegMax, priceFcfMin, priceFcfMax, bookValuePerShareMin, bookValuePerShareMax, priceBookValuePerShareMin, priceBookValuePerShareMax, payoutMin, payoutMax, debtToEquityMin, debtToEquityMax, grossMarginMin, grossMarginMax, operatingMarginMin, operatingMarginMax, profitMarginMin, profitMarginMax, priceToSalesMin, priceToSalesMax, buybacksThreeMonthsMin, buybacksThreeMonthsMax, buybacksSixMonthsMin, buybacksSixMonthsMax, buybacksOneYearMin, buybacksOneYearMax, buybacksTwoYearsMin, buybacksTwoYearsMax, buybacksThreeYearsMin, buybacksThreeYearsMax, buybacksFiveYearsMin, buybacksFiveYearsMax, buybacksTenYearsMin, buybacksTenYearsMax, buybacksTwentyYearsMin, buybacksTwentyYearsMax, potentialUpside);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScreenerRequest {\n");
    
    sb.append("    searchQuery: ").append(toIndentedString(searchQuery)).append("\n");
    sb.append("    exchangeIds: ").append(toIndentedString(exchangeIds)).append("\n");
    sb.append("    sectorIds: ").append(toIndentedString(sectorIds)).append("\n");
    sb.append("    industryIds: ").append(toIndentedString(industryIds)).append("\n");
    sb.append("    marketCapMin: ").append(toIndentedString(marketCapMin)).append("\n");
    sb.append("    marketCapMax: ").append(toIndentedString(marketCapMax)).append("\n");
    sb.append("    betaMin: ").append(toIndentedString(betaMin)).append("\n");
    sb.append("    betaMax: ").append(toIndentedString(betaMax)).append("\n");
    sb.append("    forwardDividendMin: ").append(toIndentedString(forwardDividendMin)).append("\n");
    sb.append("    forwardDividendMax: ").append(toIndentedString(forwardDividendMax)).append("\n");
    sb.append("    forwardDividendYieldMin: ").append(toIndentedString(forwardDividendYieldMin)).append("\n");
    sb.append("    forwardDividendYieldMax: ").append(toIndentedString(forwardDividendYieldMax)).append("\n");
    sb.append("    shortRatioMin: ").append(toIndentedString(shortRatioMin)).append("\n");
    sb.append("    shortRatioMax: ").append(toIndentedString(shortRatioMax)).append("\n");
    sb.append("    sharesShortPercentageMin: ").append(toIndentedString(sharesShortPercentageMin)).append("\n");
    sb.append("    sharesShortPercentageMax: ").append(toIndentedString(sharesShortPercentageMax)).append("\n");
    sb.append("    sharesShortPreviousMonthPercentageMin: ").append(toIndentedString(sharesShortPreviousMonthPercentageMin)).append("\n");
    sb.append("    sharesShortPreviousMonthPercentageMax: ").append(toIndentedString(sharesShortPreviousMonthPercentageMax)).append("\n");
    sb.append("    analystRecommendationMin: ").append(toIndentedString(analystRecommendationMin)).append("\n");
    sb.append("    analystRecommendationMax: ").append(toIndentedString(analystRecommendationMax)).append("\n");
    sb.append("    performanceOneDayMin: ").append(toIndentedString(performanceOneDayMin)).append("\n");
    sb.append("    performanceOneDayMax: ").append(toIndentedString(performanceOneDayMax)).append("\n");
    sb.append("    performanceOneWeekMin: ").append(toIndentedString(performanceOneWeekMin)).append("\n");
    sb.append("    performanceOneWeekMax: ").append(toIndentedString(performanceOneWeekMax)).append("\n");
    sb.append("    performanceTwoWeeksMin: ").append(toIndentedString(performanceTwoWeeksMin)).append("\n");
    sb.append("    performanceTwoWeeksMax: ").append(toIndentedString(performanceTwoWeeksMax)).append("\n");
    sb.append("    performanceOneMonthMin: ").append(toIndentedString(performanceOneMonthMin)).append("\n");
    sb.append("    performanceOneMonthMax: ").append(toIndentedString(performanceOneMonthMax)).append("\n");
    sb.append("    performanceThreeMonthsMin: ").append(toIndentedString(performanceThreeMonthsMin)).append("\n");
    sb.append("    performanceThreeMonthsMax: ").append(toIndentedString(performanceThreeMonthsMax)).append("\n");
    sb.append("    performanceOneYearMin: ").append(toIndentedString(performanceOneYearMin)).append("\n");
    sb.append("    performanceOneYearMax: ").append(toIndentedString(performanceOneYearMax)).append("\n");
    sb.append("    performanceThreeYearsMin: ").append(toIndentedString(performanceThreeYearsMin)).append("\n");
    sb.append("    performanceThreeYearsMax: ").append(toIndentedString(performanceThreeYearsMax)).append("\n");
    sb.append("    performanceFiveYearsMin: ").append(toIndentedString(performanceFiveYearsMin)).append("\n");
    sb.append("    performanceFiveYearsMax: ").append(toIndentedString(performanceFiveYearsMax)).append("\n");
    sb.append("    performanceTenYearsMin: ").append(toIndentedString(performanceTenYearsMin)).append("\n");
    sb.append("    performanceTenYearsMax: ").append(toIndentedString(performanceTenYearsMax)).append("\n");
    sb.append("    performanceTwentyYearsMin: ").append(toIndentedString(performanceTwentyYearsMin)).append("\n");
    sb.append("    performanceTwentyYearsMax: ").append(toIndentedString(performanceTwentyYearsMax)).append("\n");
    sb.append("    epsGrowthOneYearMin: ").append(toIndentedString(epsGrowthOneYearMin)).append("\n");
    sb.append("    epsGrowthOneYearMax: ").append(toIndentedString(epsGrowthOneYearMax)).append("\n");
    sb.append("    epsGrowthTwoYearsMin: ").append(toIndentedString(epsGrowthTwoYearsMin)).append("\n");
    sb.append("    epsGrowthTwoYearsMax: ").append(toIndentedString(epsGrowthTwoYearsMax)).append("\n");
    sb.append("    epsGrowthThreeYearsMin: ").append(toIndentedString(epsGrowthThreeYearsMin)).append("\n");
    sb.append("    epsGrowthThreeYearsMax: ").append(toIndentedString(epsGrowthThreeYearsMax)).append("\n");
    sb.append("    epsGrowthFiveYearsMin: ").append(toIndentedString(epsGrowthFiveYearsMin)).append("\n");
    sb.append("    epsGrowthFiveYearsMax: ").append(toIndentedString(epsGrowthFiveYearsMax)).append("\n");
    sb.append("    epsGrowthTenYearsMin: ").append(toIndentedString(epsGrowthTenYearsMin)).append("\n");
    sb.append("    epsGrowthTenYearsMax: ").append(toIndentedString(epsGrowthTenYearsMax)).append("\n");
    sb.append("    epsGrowthTwentyYearsMin: ").append(toIndentedString(epsGrowthTwentyYearsMin)).append("\n");
    sb.append("    epsGrowthTwentyYearsMax: ").append(toIndentedString(epsGrowthTwentyYearsMax)).append("\n");
    sb.append("    peMin: ").append(toIndentedString(peMin)).append("\n");
    sb.append("    peMax: ").append(toIndentedString(peMax)).append("\n");
    sb.append("    pegMin: ").append(toIndentedString(pegMin)).append("\n");
    sb.append("    pegMax: ").append(toIndentedString(pegMax)).append("\n");
    sb.append("    priceFcfMin: ").append(toIndentedString(priceFcfMin)).append("\n");
    sb.append("    priceFcfMax: ").append(toIndentedString(priceFcfMax)).append("\n");
    sb.append("    bookValuePerShareMin: ").append(toIndentedString(bookValuePerShareMin)).append("\n");
    sb.append("    bookValuePerShareMax: ").append(toIndentedString(bookValuePerShareMax)).append("\n");
    sb.append("    priceBookValuePerShareMin: ").append(toIndentedString(priceBookValuePerShareMin)).append("\n");
    sb.append("    priceBookValuePerShareMax: ").append(toIndentedString(priceBookValuePerShareMax)).append("\n");
    sb.append("    payoutMin: ").append(toIndentedString(payoutMin)).append("\n");
    sb.append("    payoutMax: ").append(toIndentedString(payoutMax)).append("\n");
    sb.append("    debtToEquityMin: ").append(toIndentedString(debtToEquityMin)).append("\n");
    sb.append("    debtToEquityMax: ").append(toIndentedString(debtToEquityMax)).append("\n");
    sb.append("    grossMarginMin: ").append(toIndentedString(grossMarginMin)).append("\n");
    sb.append("    grossMarginMax: ").append(toIndentedString(grossMarginMax)).append("\n");
    sb.append("    operatingMarginMin: ").append(toIndentedString(operatingMarginMin)).append("\n");
    sb.append("    operatingMarginMax: ").append(toIndentedString(operatingMarginMax)).append("\n");
    sb.append("    profitMarginMin: ").append(toIndentedString(profitMarginMin)).append("\n");
    sb.append("    profitMarginMax: ").append(toIndentedString(profitMarginMax)).append("\n");
    sb.append("    priceToSalesMin: ").append(toIndentedString(priceToSalesMin)).append("\n");
    sb.append("    priceToSalesMax: ").append(toIndentedString(priceToSalesMax)).append("\n");
    sb.append("    buybacksThreeMonthsMin: ").append(toIndentedString(buybacksThreeMonthsMin)).append("\n");
    sb.append("    buybacksThreeMonthsMax: ").append(toIndentedString(buybacksThreeMonthsMax)).append("\n");
    sb.append("    buybacksSixMonthsMin: ").append(toIndentedString(buybacksSixMonthsMin)).append("\n");
    sb.append("    buybacksSixMonthsMax: ").append(toIndentedString(buybacksSixMonthsMax)).append("\n");
    sb.append("    buybacksOneYearMin: ").append(toIndentedString(buybacksOneYearMin)).append("\n");
    sb.append("    buybacksOneYearMax: ").append(toIndentedString(buybacksOneYearMax)).append("\n");
    sb.append("    buybacksTwoYearsMin: ").append(toIndentedString(buybacksTwoYearsMin)).append("\n");
    sb.append("    buybacksTwoYearsMax: ").append(toIndentedString(buybacksTwoYearsMax)).append("\n");
    sb.append("    buybacksThreeYearsMin: ").append(toIndentedString(buybacksThreeYearsMin)).append("\n");
    sb.append("    buybacksThreeYearsMax: ").append(toIndentedString(buybacksThreeYearsMax)).append("\n");
    sb.append("    buybacksFiveYearsMin: ").append(toIndentedString(buybacksFiveYearsMin)).append("\n");
    sb.append("    buybacksFiveYearsMax: ").append(toIndentedString(buybacksFiveYearsMax)).append("\n");
    sb.append("    buybacksTenYearsMin: ").append(toIndentedString(buybacksTenYearsMin)).append("\n");
    sb.append("    buybacksTenYearsMax: ").append(toIndentedString(buybacksTenYearsMax)).append("\n");
    sb.append("    buybacksTwentyYearsMin: ").append(toIndentedString(buybacksTwentyYearsMin)).append("\n");
    sb.append("    buybacksTwentyYearsMax: ").append(toIndentedString(buybacksTwentyYearsMax)).append("\n");
    sb.append("    potentialUpside: ").append(toIndentedString(potentialUpside)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
