/*
 * Stocks
 * <h3>Authentication</h3>                     You need to authenticate to use this API.                     To authenticate click on the \"Authorize\" button and do one of the following steps.<br />                     1. Send your API key in the headers of the request by typing \"Bearer my-key\" on the Bearer authorization scheme.<br />                     2. Send your API key on the \"ApiKey\" query string parameter. To do this type your API key in the Query String authorization scheme.<br />                     Both methods are equally valid. We offer both options so that you can use the method that is easier to use in your application.<br />                     <br />                     <h3>API limits</h3>                     Your API key may be subject to daily/hourly limits. To know how much requests you have left look at the following headers in the response.<br />                     1. <strong>x-ratelimit-limit</strong> - The total number of requests that you are allowed to make in a given period (hour/day)                       2. <strong>x-ratelimit-remaining</strong> - The number of remaining requests that you can perform in the current period.<br />                     3. <strong>x-ratelimit-reset</strong> - The number of seconds until the current period resets.<br />                     <br />                     <h3>Suggestions</h3>                     You don't need to implement the whole API by hand in your programming language of choice.<br />                     Since this API has an OpenAPI specification you can use                      <a href=\"https://github.com/swagger-api/swagger-codegen\" target=\"_blank\">Swagger Generator</a>                      to automatically generate client stubs for more than 30 programming languages.                     <br />                     <br />                     You don't have an API key? <a href=\"https://www.equibles.com/api/pricing\" target=\"_blank\">Get one for free here.</a>
 *
 * OpenAPI spec version: v1
 * Contact: equibles@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.equibles.stocks.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * BalanceSheet
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-01-28T01:43:07.282Z[Europe/Lisbon]")
public class BalanceSheet {
  @SerializedName("assets")
  private Long assets = null;

  @SerializedName("tangibleAssets")
  private Long tangibleAssets = null;

  @SerializedName("currentAssets")
  private Long currentAssets = null;

  @SerializedName("cashAndCashEquivalents")
  private Long cashAndCashEquivalents = null;

  @SerializedName("cashAndShortTermInvestments")
  private Long cashAndShortTermInvestments = null;

  @SerializedName("inventory")
  private Long inventory = null;

  @SerializedName("currentNetReceivables")
  private Long currentNetReceivables = null;

  @SerializedName("nonCurrentAssets")
  private Long nonCurrentAssets = null;

  @SerializedName("propertyPlantEquipment")
  private Long propertyPlantEquipment = null;

  @SerializedName("accumulatedDepreciationAmortization")
  private Long accumulatedDepreciationAmortization = null;

  @SerializedName("intangibleAssets")
  private Long intangibleAssets = null;

  @SerializedName("intangibleAssetsExcludingGoodwill")
  private Long intangibleAssetsExcludingGoodwill = null;

  @SerializedName("goodwill")
  private Long goodwill = null;

  @SerializedName("investments")
  private Long investments = null;

  @SerializedName("longTermInvestments")
  private Long longTermInvestments = null;

  @SerializedName("shortTermInvestments")
  private Long shortTermInvestments = null;

  @SerializedName("otherCurrentAssets")
  private Long otherCurrentAssets = null;

  @SerializedName("otherNonCurrentAssets")
  private Long otherNonCurrentAssets = null;

  @SerializedName("liabilities")
  private Long liabilities = null;

  @SerializedName("currentLiabilities")
  private Long currentLiabilities = null;

  @SerializedName("currentAccountsPayable")
  private Long currentAccountsPayable = null;

  @SerializedName("deferredRevenue")
  private Long deferredRevenue = null;

  @SerializedName("currentDebt")
  private Long currentDebt = null;

  @SerializedName("shortTermDebt")
  private Long shortTermDebt = null;

  @SerializedName("nonCurrentLiabilities")
  private Long nonCurrentLiabilities = null;

  @SerializedName("capitalLeaseObligations")
  private Long capitalLeaseObligations = null;

  @SerializedName("longTermDebt")
  private Long longTermDebt = null;

  @SerializedName("currentLongTermDebt")
  private Long currentLongTermDebt = null;

  @SerializedName("longTermDebtNonCurrent")
  private Long longTermDebtNonCurrent = null;

  @SerializedName("shortLongTermDebtTotal")
  private Long shortLongTermDebtTotal = null;

  @SerializedName("otherCurrentLiabilities")
  private Long otherCurrentLiabilities = null;

  @SerializedName("otherNonCurrentLiabilities")
  private Long otherNonCurrentLiabilities = null;

  @SerializedName("equity")
  private Long equity = null;

  @SerializedName("treasuryStock")
  private Long treasuryStock = null;

  @SerializedName("retainedEarnings")
  private Long retainedEarnings = null;

  @SerializedName("commonStock")
  private Long commonStock = null;

  @SerializedName("sharesOutstanding")
  private Long sharesOutstanding = null;

  @SerializedName("accumulatedOtherComprehensiveIncome")
  private Long accumulatedOtherComprehensiveIncome = null;

  @SerializedName("workingCapital")
  private Long workingCapital = null;

  public BalanceSheet assets(Long assets) {
    this.assets = assets;
    return this;
  }

   /**
   * Get assets
   * @return assets
  **/
  @Schema(description = "")
  public Long getAssets() {
    return assets;
  }

  public void setAssets(Long assets) {
    this.assets = assets;
  }

  public BalanceSheet tangibleAssets(Long tangibleAssets) {
    this.tangibleAssets = tangibleAssets;
    return this;
  }

   /**
   * Get tangibleAssets
   * @return tangibleAssets
  **/
  @Schema(description = "")
  public Long getTangibleAssets() {
    return tangibleAssets;
  }

  public void setTangibleAssets(Long tangibleAssets) {
    this.tangibleAssets = tangibleAssets;
  }

  public BalanceSheet currentAssets(Long currentAssets) {
    this.currentAssets = currentAssets;
    return this;
  }

   /**
   * Get currentAssets
   * @return currentAssets
  **/
  @Schema(description = "")
  public Long getCurrentAssets() {
    return currentAssets;
  }

  public void setCurrentAssets(Long currentAssets) {
    this.currentAssets = currentAssets;
  }

  public BalanceSheet cashAndCashEquivalents(Long cashAndCashEquivalents) {
    this.cashAndCashEquivalents = cashAndCashEquivalents;
    return this;
  }

   /**
   * Get cashAndCashEquivalents
   * @return cashAndCashEquivalents
  **/
  @Schema(description = "")
  public Long getCashAndCashEquivalents() {
    return cashAndCashEquivalents;
  }

  public void setCashAndCashEquivalents(Long cashAndCashEquivalents) {
    this.cashAndCashEquivalents = cashAndCashEquivalents;
  }

  public BalanceSheet cashAndShortTermInvestments(Long cashAndShortTermInvestments) {
    this.cashAndShortTermInvestments = cashAndShortTermInvestments;
    return this;
  }

   /**
   * Get cashAndShortTermInvestments
   * @return cashAndShortTermInvestments
  **/
  @Schema(description = "")
  public Long getCashAndShortTermInvestments() {
    return cashAndShortTermInvestments;
  }

  public void setCashAndShortTermInvestments(Long cashAndShortTermInvestments) {
    this.cashAndShortTermInvestments = cashAndShortTermInvestments;
  }

  public BalanceSheet inventory(Long inventory) {
    this.inventory = inventory;
    return this;
  }

   /**
   * Get inventory
   * @return inventory
  **/
  @Schema(description = "")
  public Long getInventory() {
    return inventory;
  }

  public void setInventory(Long inventory) {
    this.inventory = inventory;
  }

  public BalanceSheet currentNetReceivables(Long currentNetReceivables) {
    this.currentNetReceivables = currentNetReceivables;
    return this;
  }

   /**
   * Get currentNetReceivables
   * @return currentNetReceivables
  **/
  @Schema(description = "")
  public Long getCurrentNetReceivables() {
    return currentNetReceivables;
  }

  public void setCurrentNetReceivables(Long currentNetReceivables) {
    this.currentNetReceivables = currentNetReceivables;
  }

  public BalanceSheet nonCurrentAssets(Long nonCurrentAssets) {
    this.nonCurrentAssets = nonCurrentAssets;
    return this;
  }

   /**
   * Get nonCurrentAssets
   * @return nonCurrentAssets
  **/
  @Schema(description = "")
  public Long getNonCurrentAssets() {
    return nonCurrentAssets;
  }

  public void setNonCurrentAssets(Long nonCurrentAssets) {
    this.nonCurrentAssets = nonCurrentAssets;
  }

  public BalanceSheet propertyPlantEquipment(Long propertyPlantEquipment) {
    this.propertyPlantEquipment = propertyPlantEquipment;
    return this;
  }

   /**
   * Get propertyPlantEquipment
   * @return propertyPlantEquipment
  **/
  @Schema(description = "")
  public Long getPropertyPlantEquipment() {
    return propertyPlantEquipment;
  }

  public void setPropertyPlantEquipment(Long propertyPlantEquipment) {
    this.propertyPlantEquipment = propertyPlantEquipment;
  }

  public BalanceSheet accumulatedDepreciationAmortization(Long accumulatedDepreciationAmortization) {
    this.accumulatedDepreciationAmortization = accumulatedDepreciationAmortization;
    return this;
  }

   /**
   * Get accumulatedDepreciationAmortization
   * @return accumulatedDepreciationAmortization
  **/
  @Schema(description = "")
  public Long getAccumulatedDepreciationAmortization() {
    return accumulatedDepreciationAmortization;
  }

  public void setAccumulatedDepreciationAmortization(Long accumulatedDepreciationAmortization) {
    this.accumulatedDepreciationAmortization = accumulatedDepreciationAmortization;
  }

  public BalanceSheet intangibleAssets(Long intangibleAssets) {
    this.intangibleAssets = intangibleAssets;
    return this;
  }

   /**
   * Get intangibleAssets
   * @return intangibleAssets
  **/
  @Schema(description = "")
  public Long getIntangibleAssets() {
    return intangibleAssets;
  }

  public void setIntangibleAssets(Long intangibleAssets) {
    this.intangibleAssets = intangibleAssets;
  }

  public BalanceSheet intangibleAssetsExcludingGoodwill(Long intangibleAssetsExcludingGoodwill) {
    this.intangibleAssetsExcludingGoodwill = intangibleAssetsExcludingGoodwill;
    return this;
  }

   /**
   * Get intangibleAssetsExcludingGoodwill
   * @return intangibleAssetsExcludingGoodwill
  **/
  @Schema(description = "")
  public Long getIntangibleAssetsExcludingGoodwill() {
    return intangibleAssetsExcludingGoodwill;
  }

  public void setIntangibleAssetsExcludingGoodwill(Long intangibleAssetsExcludingGoodwill) {
    this.intangibleAssetsExcludingGoodwill = intangibleAssetsExcludingGoodwill;
  }

  public BalanceSheet goodwill(Long goodwill) {
    this.goodwill = goodwill;
    return this;
  }

   /**
   * Get goodwill
   * @return goodwill
  **/
  @Schema(description = "")
  public Long getGoodwill() {
    return goodwill;
  }

  public void setGoodwill(Long goodwill) {
    this.goodwill = goodwill;
  }

  public BalanceSheet investments(Long investments) {
    this.investments = investments;
    return this;
  }

   /**
   * Get investments
   * @return investments
  **/
  @Schema(description = "")
  public Long getInvestments() {
    return investments;
  }

  public void setInvestments(Long investments) {
    this.investments = investments;
  }

  public BalanceSheet longTermInvestments(Long longTermInvestments) {
    this.longTermInvestments = longTermInvestments;
    return this;
  }

   /**
   * Get longTermInvestments
   * @return longTermInvestments
  **/
  @Schema(description = "")
  public Long getLongTermInvestments() {
    return longTermInvestments;
  }

  public void setLongTermInvestments(Long longTermInvestments) {
    this.longTermInvestments = longTermInvestments;
  }

  public BalanceSheet shortTermInvestments(Long shortTermInvestments) {
    this.shortTermInvestments = shortTermInvestments;
    return this;
  }

   /**
   * Get shortTermInvestments
   * @return shortTermInvestments
  **/
  @Schema(description = "")
  public Long getShortTermInvestments() {
    return shortTermInvestments;
  }

  public void setShortTermInvestments(Long shortTermInvestments) {
    this.shortTermInvestments = shortTermInvestments;
  }

  public BalanceSheet otherCurrentAssets(Long otherCurrentAssets) {
    this.otherCurrentAssets = otherCurrentAssets;
    return this;
  }

   /**
   * Get otherCurrentAssets
   * @return otherCurrentAssets
  **/
  @Schema(description = "")
  public Long getOtherCurrentAssets() {
    return otherCurrentAssets;
  }

  public void setOtherCurrentAssets(Long otherCurrentAssets) {
    this.otherCurrentAssets = otherCurrentAssets;
  }

  public BalanceSheet otherNonCurrentAssets(Long otherNonCurrentAssets) {
    this.otherNonCurrentAssets = otherNonCurrentAssets;
    return this;
  }

   /**
   * Get otherNonCurrentAssets
   * @return otherNonCurrentAssets
  **/
  @Schema(description = "")
  public Long getOtherNonCurrentAssets() {
    return otherNonCurrentAssets;
  }

  public void setOtherNonCurrentAssets(Long otherNonCurrentAssets) {
    this.otherNonCurrentAssets = otherNonCurrentAssets;
  }

  public BalanceSheet liabilities(Long liabilities) {
    this.liabilities = liabilities;
    return this;
  }

   /**
   * Get liabilities
   * @return liabilities
  **/
  @Schema(description = "")
  public Long getLiabilities() {
    return liabilities;
  }

  public void setLiabilities(Long liabilities) {
    this.liabilities = liabilities;
  }

  public BalanceSheet currentLiabilities(Long currentLiabilities) {
    this.currentLiabilities = currentLiabilities;
    return this;
  }

   /**
   * Get currentLiabilities
   * @return currentLiabilities
  **/
  @Schema(description = "")
  public Long getCurrentLiabilities() {
    return currentLiabilities;
  }

  public void setCurrentLiabilities(Long currentLiabilities) {
    this.currentLiabilities = currentLiabilities;
  }

  public BalanceSheet currentAccountsPayable(Long currentAccountsPayable) {
    this.currentAccountsPayable = currentAccountsPayable;
    return this;
  }

   /**
   * Get currentAccountsPayable
   * @return currentAccountsPayable
  **/
  @Schema(description = "")
  public Long getCurrentAccountsPayable() {
    return currentAccountsPayable;
  }

  public void setCurrentAccountsPayable(Long currentAccountsPayable) {
    this.currentAccountsPayable = currentAccountsPayable;
  }

  public BalanceSheet deferredRevenue(Long deferredRevenue) {
    this.deferredRevenue = deferredRevenue;
    return this;
  }

   /**
   * Get deferredRevenue
   * @return deferredRevenue
  **/
  @Schema(description = "")
  public Long getDeferredRevenue() {
    return deferredRevenue;
  }

  public void setDeferredRevenue(Long deferredRevenue) {
    this.deferredRevenue = deferredRevenue;
  }

  public BalanceSheet currentDebt(Long currentDebt) {
    this.currentDebt = currentDebt;
    return this;
  }

   /**
   * Get currentDebt
   * @return currentDebt
  **/
  @Schema(description = "")
  public Long getCurrentDebt() {
    return currentDebt;
  }

  public void setCurrentDebt(Long currentDebt) {
    this.currentDebt = currentDebt;
  }

  public BalanceSheet shortTermDebt(Long shortTermDebt) {
    this.shortTermDebt = shortTermDebt;
    return this;
  }

   /**
   * Get shortTermDebt
   * @return shortTermDebt
  **/
  @Schema(description = "")
  public Long getShortTermDebt() {
    return shortTermDebt;
  }

  public void setShortTermDebt(Long shortTermDebt) {
    this.shortTermDebt = shortTermDebt;
  }

  public BalanceSheet nonCurrentLiabilities(Long nonCurrentLiabilities) {
    this.nonCurrentLiabilities = nonCurrentLiabilities;
    return this;
  }

   /**
   * Get nonCurrentLiabilities
   * @return nonCurrentLiabilities
  **/
  @Schema(description = "")
  public Long getNonCurrentLiabilities() {
    return nonCurrentLiabilities;
  }

  public void setNonCurrentLiabilities(Long nonCurrentLiabilities) {
    this.nonCurrentLiabilities = nonCurrentLiabilities;
  }

  public BalanceSheet capitalLeaseObligations(Long capitalLeaseObligations) {
    this.capitalLeaseObligations = capitalLeaseObligations;
    return this;
  }

   /**
   * Get capitalLeaseObligations
   * @return capitalLeaseObligations
  **/
  @Schema(description = "")
  public Long getCapitalLeaseObligations() {
    return capitalLeaseObligations;
  }

  public void setCapitalLeaseObligations(Long capitalLeaseObligations) {
    this.capitalLeaseObligations = capitalLeaseObligations;
  }

  public BalanceSheet longTermDebt(Long longTermDebt) {
    this.longTermDebt = longTermDebt;
    return this;
  }

   /**
   * Get longTermDebt
   * @return longTermDebt
  **/
  @Schema(description = "")
  public Long getLongTermDebt() {
    return longTermDebt;
  }

  public void setLongTermDebt(Long longTermDebt) {
    this.longTermDebt = longTermDebt;
  }

  public BalanceSheet currentLongTermDebt(Long currentLongTermDebt) {
    this.currentLongTermDebt = currentLongTermDebt;
    return this;
  }

   /**
   * Get currentLongTermDebt
   * @return currentLongTermDebt
  **/
  @Schema(description = "")
  public Long getCurrentLongTermDebt() {
    return currentLongTermDebt;
  }

  public void setCurrentLongTermDebt(Long currentLongTermDebt) {
    this.currentLongTermDebt = currentLongTermDebt;
  }

  public BalanceSheet longTermDebtNonCurrent(Long longTermDebtNonCurrent) {
    this.longTermDebtNonCurrent = longTermDebtNonCurrent;
    return this;
  }

   /**
   * Get longTermDebtNonCurrent
   * @return longTermDebtNonCurrent
  **/
  @Schema(description = "")
  public Long getLongTermDebtNonCurrent() {
    return longTermDebtNonCurrent;
  }

  public void setLongTermDebtNonCurrent(Long longTermDebtNonCurrent) {
    this.longTermDebtNonCurrent = longTermDebtNonCurrent;
  }

  public BalanceSheet shortLongTermDebtTotal(Long shortLongTermDebtTotal) {
    this.shortLongTermDebtTotal = shortLongTermDebtTotal;
    return this;
  }

   /**
   * Get shortLongTermDebtTotal
   * @return shortLongTermDebtTotal
  **/
  @Schema(description = "")
  public Long getShortLongTermDebtTotal() {
    return shortLongTermDebtTotal;
  }

  public void setShortLongTermDebtTotal(Long shortLongTermDebtTotal) {
    this.shortLongTermDebtTotal = shortLongTermDebtTotal;
  }

  public BalanceSheet otherCurrentLiabilities(Long otherCurrentLiabilities) {
    this.otherCurrentLiabilities = otherCurrentLiabilities;
    return this;
  }

   /**
   * Get otherCurrentLiabilities
   * @return otherCurrentLiabilities
  **/
  @Schema(description = "")
  public Long getOtherCurrentLiabilities() {
    return otherCurrentLiabilities;
  }

  public void setOtherCurrentLiabilities(Long otherCurrentLiabilities) {
    this.otherCurrentLiabilities = otherCurrentLiabilities;
  }

  public BalanceSheet otherNonCurrentLiabilities(Long otherNonCurrentLiabilities) {
    this.otherNonCurrentLiabilities = otherNonCurrentLiabilities;
    return this;
  }

   /**
   * Get otherNonCurrentLiabilities
   * @return otherNonCurrentLiabilities
  **/
  @Schema(description = "")
  public Long getOtherNonCurrentLiabilities() {
    return otherNonCurrentLiabilities;
  }

  public void setOtherNonCurrentLiabilities(Long otherNonCurrentLiabilities) {
    this.otherNonCurrentLiabilities = otherNonCurrentLiabilities;
  }

  public BalanceSheet equity(Long equity) {
    this.equity = equity;
    return this;
  }

   /**
   * Get equity
   * @return equity
  **/
  @Schema(description = "")
  public Long getEquity() {
    return equity;
  }

  public void setEquity(Long equity) {
    this.equity = equity;
  }

  public BalanceSheet treasuryStock(Long treasuryStock) {
    this.treasuryStock = treasuryStock;
    return this;
  }

   /**
   * Get treasuryStock
   * @return treasuryStock
  **/
  @Schema(description = "")
  public Long getTreasuryStock() {
    return treasuryStock;
  }

  public void setTreasuryStock(Long treasuryStock) {
    this.treasuryStock = treasuryStock;
  }

  public BalanceSheet retainedEarnings(Long retainedEarnings) {
    this.retainedEarnings = retainedEarnings;
    return this;
  }

   /**
   * Get retainedEarnings
   * @return retainedEarnings
  **/
  @Schema(description = "")
  public Long getRetainedEarnings() {
    return retainedEarnings;
  }

  public void setRetainedEarnings(Long retainedEarnings) {
    this.retainedEarnings = retainedEarnings;
  }

  public BalanceSheet commonStock(Long commonStock) {
    this.commonStock = commonStock;
    return this;
  }

   /**
   * Get commonStock
   * @return commonStock
  **/
  @Schema(description = "")
  public Long getCommonStock() {
    return commonStock;
  }

  public void setCommonStock(Long commonStock) {
    this.commonStock = commonStock;
  }

  public BalanceSheet sharesOutstanding(Long sharesOutstanding) {
    this.sharesOutstanding = sharesOutstanding;
    return this;
  }

   /**
   * Get sharesOutstanding
   * @return sharesOutstanding
  **/
  @Schema(description = "")
  public Long getSharesOutstanding() {
    return sharesOutstanding;
  }

  public void setSharesOutstanding(Long sharesOutstanding) {
    this.sharesOutstanding = sharesOutstanding;
  }

  public BalanceSheet accumulatedOtherComprehensiveIncome(Long accumulatedOtherComprehensiveIncome) {
    this.accumulatedOtherComprehensiveIncome = accumulatedOtherComprehensiveIncome;
    return this;
  }

   /**
   * Get accumulatedOtherComprehensiveIncome
   * @return accumulatedOtherComprehensiveIncome
  **/
  @Schema(description = "")
  public Long getAccumulatedOtherComprehensiveIncome() {
    return accumulatedOtherComprehensiveIncome;
  }

  public void setAccumulatedOtherComprehensiveIncome(Long accumulatedOtherComprehensiveIncome) {
    this.accumulatedOtherComprehensiveIncome = accumulatedOtherComprehensiveIncome;
  }

  public BalanceSheet workingCapital(Long workingCapital) {
    this.workingCapital = workingCapital;
    return this;
  }

   /**
   * Get workingCapital
   * @return workingCapital
  **/
  @Schema(description = "")
  public Long getWorkingCapital() {
    return workingCapital;
  }

  public void setWorkingCapital(Long workingCapital) {
    this.workingCapital = workingCapital;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BalanceSheet balanceSheet = (BalanceSheet) o;
    return Objects.equals(this.assets, balanceSheet.assets) &&
        Objects.equals(this.tangibleAssets, balanceSheet.tangibleAssets) &&
        Objects.equals(this.currentAssets, balanceSheet.currentAssets) &&
        Objects.equals(this.cashAndCashEquivalents, balanceSheet.cashAndCashEquivalents) &&
        Objects.equals(this.cashAndShortTermInvestments, balanceSheet.cashAndShortTermInvestments) &&
        Objects.equals(this.inventory, balanceSheet.inventory) &&
        Objects.equals(this.currentNetReceivables, balanceSheet.currentNetReceivables) &&
        Objects.equals(this.nonCurrentAssets, balanceSheet.nonCurrentAssets) &&
        Objects.equals(this.propertyPlantEquipment, balanceSheet.propertyPlantEquipment) &&
        Objects.equals(this.accumulatedDepreciationAmortization, balanceSheet.accumulatedDepreciationAmortization) &&
        Objects.equals(this.intangibleAssets, balanceSheet.intangibleAssets) &&
        Objects.equals(this.intangibleAssetsExcludingGoodwill, balanceSheet.intangibleAssetsExcludingGoodwill) &&
        Objects.equals(this.goodwill, balanceSheet.goodwill) &&
        Objects.equals(this.investments, balanceSheet.investments) &&
        Objects.equals(this.longTermInvestments, balanceSheet.longTermInvestments) &&
        Objects.equals(this.shortTermInvestments, balanceSheet.shortTermInvestments) &&
        Objects.equals(this.otherCurrentAssets, balanceSheet.otherCurrentAssets) &&
        Objects.equals(this.otherNonCurrentAssets, balanceSheet.otherNonCurrentAssets) &&
        Objects.equals(this.liabilities, balanceSheet.liabilities) &&
        Objects.equals(this.currentLiabilities, balanceSheet.currentLiabilities) &&
        Objects.equals(this.currentAccountsPayable, balanceSheet.currentAccountsPayable) &&
        Objects.equals(this.deferredRevenue, balanceSheet.deferredRevenue) &&
        Objects.equals(this.currentDebt, balanceSheet.currentDebt) &&
        Objects.equals(this.shortTermDebt, balanceSheet.shortTermDebt) &&
        Objects.equals(this.nonCurrentLiabilities, balanceSheet.nonCurrentLiabilities) &&
        Objects.equals(this.capitalLeaseObligations, balanceSheet.capitalLeaseObligations) &&
        Objects.equals(this.longTermDebt, balanceSheet.longTermDebt) &&
        Objects.equals(this.currentLongTermDebt, balanceSheet.currentLongTermDebt) &&
        Objects.equals(this.longTermDebtNonCurrent, balanceSheet.longTermDebtNonCurrent) &&
        Objects.equals(this.shortLongTermDebtTotal, balanceSheet.shortLongTermDebtTotal) &&
        Objects.equals(this.otherCurrentLiabilities, balanceSheet.otherCurrentLiabilities) &&
        Objects.equals(this.otherNonCurrentLiabilities, balanceSheet.otherNonCurrentLiabilities) &&
        Objects.equals(this.equity, balanceSheet.equity) &&
        Objects.equals(this.treasuryStock, balanceSheet.treasuryStock) &&
        Objects.equals(this.retainedEarnings, balanceSheet.retainedEarnings) &&
        Objects.equals(this.commonStock, balanceSheet.commonStock) &&
        Objects.equals(this.sharesOutstanding, balanceSheet.sharesOutstanding) &&
        Objects.equals(this.accumulatedOtherComprehensiveIncome, balanceSheet.accumulatedOtherComprehensiveIncome) &&
        Objects.equals(this.workingCapital, balanceSheet.workingCapital);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assets, tangibleAssets, currentAssets, cashAndCashEquivalents, cashAndShortTermInvestments, inventory, currentNetReceivables, nonCurrentAssets, propertyPlantEquipment, accumulatedDepreciationAmortization, intangibleAssets, intangibleAssetsExcludingGoodwill, goodwill, investments, longTermInvestments, shortTermInvestments, otherCurrentAssets, otherNonCurrentAssets, liabilities, currentLiabilities, currentAccountsPayable, deferredRevenue, currentDebt, shortTermDebt, nonCurrentLiabilities, capitalLeaseObligations, longTermDebt, currentLongTermDebt, longTermDebtNonCurrent, shortLongTermDebtTotal, otherCurrentLiabilities, otherNonCurrentLiabilities, equity, treasuryStock, retainedEarnings, commonStock, sharesOutstanding, accumulatedOtherComprehensiveIncome, workingCapital);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BalanceSheet {\n");
    
    sb.append("    assets: ").append(toIndentedString(assets)).append("\n");
    sb.append("    tangibleAssets: ").append(toIndentedString(tangibleAssets)).append("\n");
    sb.append("    currentAssets: ").append(toIndentedString(currentAssets)).append("\n");
    sb.append("    cashAndCashEquivalents: ").append(toIndentedString(cashAndCashEquivalents)).append("\n");
    sb.append("    cashAndShortTermInvestments: ").append(toIndentedString(cashAndShortTermInvestments)).append("\n");
    sb.append("    inventory: ").append(toIndentedString(inventory)).append("\n");
    sb.append("    currentNetReceivables: ").append(toIndentedString(currentNetReceivables)).append("\n");
    sb.append("    nonCurrentAssets: ").append(toIndentedString(nonCurrentAssets)).append("\n");
    sb.append("    propertyPlantEquipment: ").append(toIndentedString(propertyPlantEquipment)).append("\n");
    sb.append("    accumulatedDepreciationAmortization: ").append(toIndentedString(accumulatedDepreciationAmortization)).append("\n");
    sb.append("    intangibleAssets: ").append(toIndentedString(intangibleAssets)).append("\n");
    sb.append("    intangibleAssetsExcludingGoodwill: ").append(toIndentedString(intangibleAssetsExcludingGoodwill)).append("\n");
    sb.append("    goodwill: ").append(toIndentedString(goodwill)).append("\n");
    sb.append("    investments: ").append(toIndentedString(investments)).append("\n");
    sb.append("    longTermInvestments: ").append(toIndentedString(longTermInvestments)).append("\n");
    sb.append("    shortTermInvestments: ").append(toIndentedString(shortTermInvestments)).append("\n");
    sb.append("    otherCurrentAssets: ").append(toIndentedString(otherCurrentAssets)).append("\n");
    sb.append("    otherNonCurrentAssets: ").append(toIndentedString(otherNonCurrentAssets)).append("\n");
    sb.append("    liabilities: ").append(toIndentedString(liabilities)).append("\n");
    sb.append("    currentLiabilities: ").append(toIndentedString(currentLiabilities)).append("\n");
    sb.append("    currentAccountsPayable: ").append(toIndentedString(currentAccountsPayable)).append("\n");
    sb.append("    deferredRevenue: ").append(toIndentedString(deferredRevenue)).append("\n");
    sb.append("    currentDebt: ").append(toIndentedString(currentDebt)).append("\n");
    sb.append("    shortTermDebt: ").append(toIndentedString(shortTermDebt)).append("\n");
    sb.append("    nonCurrentLiabilities: ").append(toIndentedString(nonCurrentLiabilities)).append("\n");
    sb.append("    capitalLeaseObligations: ").append(toIndentedString(capitalLeaseObligations)).append("\n");
    sb.append("    longTermDebt: ").append(toIndentedString(longTermDebt)).append("\n");
    sb.append("    currentLongTermDebt: ").append(toIndentedString(currentLongTermDebt)).append("\n");
    sb.append("    longTermDebtNonCurrent: ").append(toIndentedString(longTermDebtNonCurrent)).append("\n");
    sb.append("    shortLongTermDebtTotal: ").append(toIndentedString(shortLongTermDebtTotal)).append("\n");
    sb.append("    otherCurrentLiabilities: ").append(toIndentedString(otherCurrentLiabilities)).append("\n");
    sb.append("    otherNonCurrentLiabilities: ").append(toIndentedString(otherNonCurrentLiabilities)).append("\n");
    sb.append("    equity: ").append(toIndentedString(equity)).append("\n");
    sb.append("    treasuryStock: ").append(toIndentedString(treasuryStock)).append("\n");
    sb.append("    retainedEarnings: ").append(toIndentedString(retainedEarnings)).append("\n");
    sb.append("    commonStock: ").append(toIndentedString(commonStock)).append("\n");
    sb.append("    sharesOutstanding: ").append(toIndentedString(sharesOutstanding)).append("\n");
    sb.append("    accumulatedOtherComprehensiveIncome: ").append(toIndentedString(accumulatedOtherComprehensiveIncome)).append("\n");
    sb.append("    workingCapital: ").append(toIndentedString(workingCapital)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
