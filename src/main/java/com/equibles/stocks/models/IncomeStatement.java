/*
 * Stocks
 * <h3>Authentication</h3>                     You need to authenticate to use this API.                     To authenticate click on the \"Authorize\" button and do one of the following steps.<br />                     1. Send your API key in the headers of the request by typing \"Bearer my-key\" on the Bearer authorization scheme.<br />                     2. Send your API key on the \"ApiKey\" query string parameter. To do this type your API key in the Query String authorization scheme.<br />                     Both methods are equally valid. We offer both options so that you can use the method that is easier to use in your application.<br />                     <br />                     <h3>API limits</h3>                     Your API key may be subject to daily/hourly limits. To know how much requests you have left look at the following headers in the response.<br />                     1. <strong>x-ratelimit-limit</strong> - The total number of requests that you are allowed to make in a given period (hour/day)                       2. <strong>x-ratelimit-remaining</strong> - The number of remaining requests that you can perform in the current period.<br />                     3. <strong>x-ratelimit-reset</strong> - The number of seconds until the current period resets.<br />                     <br />                     <h3>Suggestions</h3>                     You don't need to implement the whole API by hand in your programming language of choice.<br />                     Since this API has an OpenAPI specification you can use                      <a href=\"https://github.com/swagger-api/swagger-codegen\" target=\"_blank\">Swagger Generator</a>                      to automatically generate client stubs for more than 30 programming languages.                     <br />                     <br />                     You don't have an API key? <a href=\"https://www.equibles.com/api/pricing\" target=\"_blank\">Get one for free here.</a>
 *
 * OpenAPI spec version: v1
 * Contact: equibles@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.equibles.stocks.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * IncomeStatement
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-01-28T01:43:07.282Z[Europe/Lisbon]")
public class IncomeStatement {
  @SerializedName("grossProfit")
  private Long grossProfit = null;

  @SerializedName("revenue")
  private Long revenue = null;

  @SerializedName("costOfRevenue")
  private Long costOfRevenue = null;

  @SerializedName("costOfGoodsAndServicesSold")
  private Long costOfGoodsAndServicesSold = null;

  @SerializedName("operatingIncome")
  private Long operatingIncome = null;

  @SerializedName("sellingGeneralAndAdministrative")
  private Long sellingGeneralAndAdministrative = null;

  @SerializedName("researchAndDevelopment")
  private Long researchAndDevelopment = null;

  @SerializedName("operatingExpenses")
  private Long operatingExpenses = null;

  @SerializedName("investmentIncomeNet")
  private Long investmentIncomeNet = null;

  @SerializedName("netInterestIncome")
  private Long netInterestIncome = null;

  @SerializedName("interestIncome")
  private Long interestIncome = null;

  @SerializedName("interestExpense")
  private Long interestExpense = null;

  @SerializedName("nonInterestIncome")
  private Long nonInterestIncome = null;

  @SerializedName("otherNonOperatingIncome")
  private Long otherNonOperatingIncome = null;

  @SerializedName("depreciation")
  private Long depreciation = null;

  @SerializedName("depreciationAndAmortization")
  private Long depreciationAndAmortization = null;

  @SerializedName("incomeBeforeTax")
  private Long incomeBeforeTax = null;

  @SerializedName("incomeTaxExpense")
  private Long incomeTaxExpense = null;

  @SerializedName("interestAndDebtExpense")
  private Long interestAndDebtExpense = null;

  @SerializedName("netIncomeFromContinuingOperations")
  private Long netIncomeFromContinuingOperations = null;

  @SerializedName("comprehensiveIncomeNetOfTax")
  private Long comprehensiveIncomeNetOfTax = null;

  @SerializedName("ebit")
  private Long ebit = null;

  @SerializedName("ebitda")
  private Long ebitda = null;

  @SerializedName("netIncome")
  private Long netIncome = null;

  @SerializedName("effectOfAccountingCharges")
  private Long effectOfAccountingCharges = null;

  @SerializedName("taxProvision")
  private Long taxProvision = null;

  @SerializedName("sellingAndMarketingExpenses")
  private Long sellingAndMarketingExpenses = null;

  @SerializedName("extraordinaryItems")
  private Long extraordinaryItems = null;

  public IncomeStatement grossProfit(Long grossProfit) {
    this.grossProfit = grossProfit;
    return this;
  }

   /**
   * Get grossProfit
   * @return grossProfit
  **/
  @Schema(description = "")
  public Long getGrossProfit() {
    return grossProfit;
  }

  public void setGrossProfit(Long grossProfit) {
    this.grossProfit = grossProfit;
  }

  public IncomeStatement revenue(Long revenue) {
    this.revenue = revenue;
    return this;
  }

   /**
   * Get revenue
   * @return revenue
  **/
  @Schema(description = "")
  public Long getRevenue() {
    return revenue;
  }

  public void setRevenue(Long revenue) {
    this.revenue = revenue;
  }

  public IncomeStatement costOfRevenue(Long costOfRevenue) {
    this.costOfRevenue = costOfRevenue;
    return this;
  }

   /**
   * Get costOfRevenue
   * @return costOfRevenue
  **/
  @Schema(description = "")
  public Long getCostOfRevenue() {
    return costOfRevenue;
  }

  public void setCostOfRevenue(Long costOfRevenue) {
    this.costOfRevenue = costOfRevenue;
  }

  public IncomeStatement costOfGoodsAndServicesSold(Long costOfGoodsAndServicesSold) {
    this.costOfGoodsAndServicesSold = costOfGoodsAndServicesSold;
    return this;
  }

   /**
   * Get costOfGoodsAndServicesSold
   * @return costOfGoodsAndServicesSold
  **/
  @Schema(description = "")
  public Long getCostOfGoodsAndServicesSold() {
    return costOfGoodsAndServicesSold;
  }

  public void setCostOfGoodsAndServicesSold(Long costOfGoodsAndServicesSold) {
    this.costOfGoodsAndServicesSold = costOfGoodsAndServicesSold;
  }

  public IncomeStatement operatingIncome(Long operatingIncome) {
    this.operatingIncome = operatingIncome;
    return this;
  }

   /**
   * Get operatingIncome
   * @return operatingIncome
  **/
  @Schema(description = "")
  public Long getOperatingIncome() {
    return operatingIncome;
  }

  public void setOperatingIncome(Long operatingIncome) {
    this.operatingIncome = operatingIncome;
  }

  public IncomeStatement sellingGeneralAndAdministrative(Long sellingGeneralAndAdministrative) {
    this.sellingGeneralAndAdministrative = sellingGeneralAndAdministrative;
    return this;
  }

   /**
   * Get sellingGeneralAndAdministrative
   * @return sellingGeneralAndAdministrative
  **/
  @Schema(description = "")
  public Long getSellingGeneralAndAdministrative() {
    return sellingGeneralAndAdministrative;
  }

  public void setSellingGeneralAndAdministrative(Long sellingGeneralAndAdministrative) {
    this.sellingGeneralAndAdministrative = sellingGeneralAndAdministrative;
  }

  public IncomeStatement researchAndDevelopment(Long researchAndDevelopment) {
    this.researchAndDevelopment = researchAndDevelopment;
    return this;
  }

   /**
   * Get researchAndDevelopment
   * @return researchAndDevelopment
  **/
  @Schema(description = "")
  public Long getResearchAndDevelopment() {
    return researchAndDevelopment;
  }

  public void setResearchAndDevelopment(Long researchAndDevelopment) {
    this.researchAndDevelopment = researchAndDevelopment;
  }

  public IncomeStatement operatingExpenses(Long operatingExpenses) {
    this.operatingExpenses = operatingExpenses;
    return this;
  }

   /**
   * Get operatingExpenses
   * @return operatingExpenses
  **/
  @Schema(description = "")
  public Long getOperatingExpenses() {
    return operatingExpenses;
  }

  public void setOperatingExpenses(Long operatingExpenses) {
    this.operatingExpenses = operatingExpenses;
  }

  public IncomeStatement investmentIncomeNet(Long investmentIncomeNet) {
    this.investmentIncomeNet = investmentIncomeNet;
    return this;
  }

   /**
   * Get investmentIncomeNet
   * @return investmentIncomeNet
  **/
  @Schema(description = "")
  public Long getInvestmentIncomeNet() {
    return investmentIncomeNet;
  }

  public void setInvestmentIncomeNet(Long investmentIncomeNet) {
    this.investmentIncomeNet = investmentIncomeNet;
  }

  public IncomeStatement netInterestIncome(Long netInterestIncome) {
    this.netInterestIncome = netInterestIncome;
    return this;
  }

   /**
   * Get netInterestIncome
   * @return netInterestIncome
  **/
  @Schema(description = "")
  public Long getNetInterestIncome() {
    return netInterestIncome;
  }

  public void setNetInterestIncome(Long netInterestIncome) {
    this.netInterestIncome = netInterestIncome;
  }

  public IncomeStatement interestIncome(Long interestIncome) {
    this.interestIncome = interestIncome;
    return this;
  }

   /**
   * Get interestIncome
   * @return interestIncome
  **/
  @Schema(description = "")
  public Long getInterestIncome() {
    return interestIncome;
  }

  public void setInterestIncome(Long interestIncome) {
    this.interestIncome = interestIncome;
  }

  public IncomeStatement interestExpense(Long interestExpense) {
    this.interestExpense = interestExpense;
    return this;
  }

   /**
   * Get interestExpense
   * @return interestExpense
  **/
  @Schema(description = "")
  public Long getInterestExpense() {
    return interestExpense;
  }

  public void setInterestExpense(Long interestExpense) {
    this.interestExpense = interestExpense;
  }

  public IncomeStatement nonInterestIncome(Long nonInterestIncome) {
    this.nonInterestIncome = nonInterestIncome;
    return this;
  }

   /**
   * Get nonInterestIncome
   * @return nonInterestIncome
  **/
  @Schema(description = "")
  public Long getNonInterestIncome() {
    return nonInterestIncome;
  }

  public void setNonInterestIncome(Long nonInterestIncome) {
    this.nonInterestIncome = nonInterestIncome;
  }

  public IncomeStatement otherNonOperatingIncome(Long otherNonOperatingIncome) {
    this.otherNonOperatingIncome = otherNonOperatingIncome;
    return this;
  }

   /**
   * Get otherNonOperatingIncome
   * @return otherNonOperatingIncome
  **/
  @Schema(description = "")
  public Long getOtherNonOperatingIncome() {
    return otherNonOperatingIncome;
  }

  public void setOtherNonOperatingIncome(Long otherNonOperatingIncome) {
    this.otherNonOperatingIncome = otherNonOperatingIncome;
  }

  public IncomeStatement depreciation(Long depreciation) {
    this.depreciation = depreciation;
    return this;
  }

   /**
   * Get depreciation
   * @return depreciation
  **/
  @Schema(description = "")
  public Long getDepreciation() {
    return depreciation;
  }

  public void setDepreciation(Long depreciation) {
    this.depreciation = depreciation;
  }

  public IncomeStatement depreciationAndAmortization(Long depreciationAndAmortization) {
    this.depreciationAndAmortization = depreciationAndAmortization;
    return this;
  }

   /**
   * Get depreciationAndAmortization
   * @return depreciationAndAmortization
  **/
  @Schema(description = "")
  public Long getDepreciationAndAmortization() {
    return depreciationAndAmortization;
  }

  public void setDepreciationAndAmortization(Long depreciationAndAmortization) {
    this.depreciationAndAmortization = depreciationAndAmortization;
  }

  public IncomeStatement incomeBeforeTax(Long incomeBeforeTax) {
    this.incomeBeforeTax = incomeBeforeTax;
    return this;
  }

   /**
   * Get incomeBeforeTax
   * @return incomeBeforeTax
  **/
  @Schema(description = "")
  public Long getIncomeBeforeTax() {
    return incomeBeforeTax;
  }

  public void setIncomeBeforeTax(Long incomeBeforeTax) {
    this.incomeBeforeTax = incomeBeforeTax;
  }

  public IncomeStatement incomeTaxExpense(Long incomeTaxExpense) {
    this.incomeTaxExpense = incomeTaxExpense;
    return this;
  }

   /**
   * Get incomeTaxExpense
   * @return incomeTaxExpense
  **/
  @Schema(description = "")
  public Long getIncomeTaxExpense() {
    return incomeTaxExpense;
  }

  public void setIncomeTaxExpense(Long incomeTaxExpense) {
    this.incomeTaxExpense = incomeTaxExpense;
  }

  public IncomeStatement interestAndDebtExpense(Long interestAndDebtExpense) {
    this.interestAndDebtExpense = interestAndDebtExpense;
    return this;
  }

   /**
   * Get interestAndDebtExpense
   * @return interestAndDebtExpense
  **/
  @Schema(description = "")
  public Long getInterestAndDebtExpense() {
    return interestAndDebtExpense;
  }

  public void setInterestAndDebtExpense(Long interestAndDebtExpense) {
    this.interestAndDebtExpense = interestAndDebtExpense;
  }

  public IncomeStatement netIncomeFromContinuingOperations(Long netIncomeFromContinuingOperations) {
    this.netIncomeFromContinuingOperations = netIncomeFromContinuingOperations;
    return this;
  }

   /**
   * Get netIncomeFromContinuingOperations
   * @return netIncomeFromContinuingOperations
  **/
  @Schema(description = "")
  public Long getNetIncomeFromContinuingOperations() {
    return netIncomeFromContinuingOperations;
  }

  public void setNetIncomeFromContinuingOperations(Long netIncomeFromContinuingOperations) {
    this.netIncomeFromContinuingOperations = netIncomeFromContinuingOperations;
  }

  public IncomeStatement comprehensiveIncomeNetOfTax(Long comprehensiveIncomeNetOfTax) {
    this.comprehensiveIncomeNetOfTax = comprehensiveIncomeNetOfTax;
    return this;
  }

   /**
   * Get comprehensiveIncomeNetOfTax
   * @return comprehensiveIncomeNetOfTax
  **/
  @Schema(description = "")
  public Long getComprehensiveIncomeNetOfTax() {
    return comprehensiveIncomeNetOfTax;
  }

  public void setComprehensiveIncomeNetOfTax(Long comprehensiveIncomeNetOfTax) {
    this.comprehensiveIncomeNetOfTax = comprehensiveIncomeNetOfTax;
  }

  public IncomeStatement ebit(Long ebit) {
    this.ebit = ebit;
    return this;
  }

   /**
   * Get ebit
   * @return ebit
  **/
  @Schema(description = "")
  public Long getEbit() {
    return ebit;
  }

  public void setEbit(Long ebit) {
    this.ebit = ebit;
  }

  public IncomeStatement ebitda(Long ebitda) {
    this.ebitda = ebitda;
    return this;
  }

   /**
   * Get ebitda
   * @return ebitda
  **/
  @Schema(description = "")
  public Long getEbitda() {
    return ebitda;
  }

  public void setEbitda(Long ebitda) {
    this.ebitda = ebitda;
  }

  public IncomeStatement netIncome(Long netIncome) {
    this.netIncome = netIncome;
    return this;
  }

   /**
   * Get netIncome
   * @return netIncome
  **/
  @Schema(description = "")
  public Long getNetIncome() {
    return netIncome;
  }

  public void setNetIncome(Long netIncome) {
    this.netIncome = netIncome;
  }

  public IncomeStatement effectOfAccountingCharges(Long effectOfAccountingCharges) {
    this.effectOfAccountingCharges = effectOfAccountingCharges;
    return this;
  }

   /**
   * Get effectOfAccountingCharges
   * @return effectOfAccountingCharges
  **/
  @Schema(description = "")
  public Long getEffectOfAccountingCharges() {
    return effectOfAccountingCharges;
  }

  public void setEffectOfAccountingCharges(Long effectOfAccountingCharges) {
    this.effectOfAccountingCharges = effectOfAccountingCharges;
  }

  public IncomeStatement taxProvision(Long taxProvision) {
    this.taxProvision = taxProvision;
    return this;
  }

   /**
   * Get taxProvision
   * @return taxProvision
  **/
  @Schema(description = "")
  public Long getTaxProvision() {
    return taxProvision;
  }

  public void setTaxProvision(Long taxProvision) {
    this.taxProvision = taxProvision;
  }

  public IncomeStatement sellingAndMarketingExpenses(Long sellingAndMarketingExpenses) {
    this.sellingAndMarketingExpenses = sellingAndMarketingExpenses;
    return this;
  }

   /**
   * Get sellingAndMarketingExpenses
   * @return sellingAndMarketingExpenses
  **/
  @Schema(description = "")
  public Long getSellingAndMarketingExpenses() {
    return sellingAndMarketingExpenses;
  }

  public void setSellingAndMarketingExpenses(Long sellingAndMarketingExpenses) {
    this.sellingAndMarketingExpenses = sellingAndMarketingExpenses;
  }

  public IncomeStatement extraordinaryItems(Long extraordinaryItems) {
    this.extraordinaryItems = extraordinaryItems;
    return this;
  }

   /**
   * Get extraordinaryItems
   * @return extraordinaryItems
  **/
  @Schema(description = "")
  public Long getExtraordinaryItems() {
    return extraordinaryItems;
  }

  public void setExtraordinaryItems(Long extraordinaryItems) {
    this.extraordinaryItems = extraordinaryItems;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IncomeStatement incomeStatement = (IncomeStatement) o;
    return Objects.equals(this.grossProfit, incomeStatement.grossProfit) &&
        Objects.equals(this.revenue, incomeStatement.revenue) &&
        Objects.equals(this.costOfRevenue, incomeStatement.costOfRevenue) &&
        Objects.equals(this.costOfGoodsAndServicesSold, incomeStatement.costOfGoodsAndServicesSold) &&
        Objects.equals(this.operatingIncome, incomeStatement.operatingIncome) &&
        Objects.equals(this.sellingGeneralAndAdministrative, incomeStatement.sellingGeneralAndAdministrative) &&
        Objects.equals(this.researchAndDevelopment, incomeStatement.researchAndDevelopment) &&
        Objects.equals(this.operatingExpenses, incomeStatement.operatingExpenses) &&
        Objects.equals(this.investmentIncomeNet, incomeStatement.investmentIncomeNet) &&
        Objects.equals(this.netInterestIncome, incomeStatement.netInterestIncome) &&
        Objects.equals(this.interestIncome, incomeStatement.interestIncome) &&
        Objects.equals(this.interestExpense, incomeStatement.interestExpense) &&
        Objects.equals(this.nonInterestIncome, incomeStatement.nonInterestIncome) &&
        Objects.equals(this.otherNonOperatingIncome, incomeStatement.otherNonOperatingIncome) &&
        Objects.equals(this.depreciation, incomeStatement.depreciation) &&
        Objects.equals(this.depreciationAndAmortization, incomeStatement.depreciationAndAmortization) &&
        Objects.equals(this.incomeBeforeTax, incomeStatement.incomeBeforeTax) &&
        Objects.equals(this.incomeTaxExpense, incomeStatement.incomeTaxExpense) &&
        Objects.equals(this.interestAndDebtExpense, incomeStatement.interestAndDebtExpense) &&
        Objects.equals(this.netIncomeFromContinuingOperations, incomeStatement.netIncomeFromContinuingOperations) &&
        Objects.equals(this.comprehensiveIncomeNetOfTax, incomeStatement.comprehensiveIncomeNetOfTax) &&
        Objects.equals(this.ebit, incomeStatement.ebit) &&
        Objects.equals(this.ebitda, incomeStatement.ebitda) &&
        Objects.equals(this.netIncome, incomeStatement.netIncome) &&
        Objects.equals(this.effectOfAccountingCharges, incomeStatement.effectOfAccountingCharges) &&
        Objects.equals(this.taxProvision, incomeStatement.taxProvision) &&
        Objects.equals(this.sellingAndMarketingExpenses, incomeStatement.sellingAndMarketingExpenses) &&
        Objects.equals(this.extraordinaryItems, incomeStatement.extraordinaryItems);
  }

  @Override
  public int hashCode() {
    return Objects.hash(grossProfit, revenue, costOfRevenue, costOfGoodsAndServicesSold, operatingIncome, sellingGeneralAndAdministrative, researchAndDevelopment, operatingExpenses, investmentIncomeNet, netInterestIncome, interestIncome, interestExpense, nonInterestIncome, otherNonOperatingIncome, depreciation, depreciationAndAmortization, incomeBeforeTax, incomeTaxExpense, interestAndDebtExpense, netIncomeFromContinuingOperations, comprehensiveIncomeNetOfTax, ebit, ebitda, netIncome, effectOfAccountingCharges, taxProvision, sellingAndMarketingExpenses, extraordinaryItems);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IncomeStatement {\n");
    
    sb.append("    grossProfit: ").append(toIndentedString(grossProfit)).append("\n");
    sb.append("    revenue: ").append(toIndentedString(revenue)).append("\n");
    sb.append("    costOfRevenue: ").append(toIndentedString(costOfRevenue)).append("\n");
    sb.append("    costOfGoodsAndServicesSold: ").append(toIndentedString(costOfGoodsAndServicesSold)).append("\n");
    sb.append("    operatingIncome: ").append(toIndentedString(operatingIncome)).append("\n");
    sb.append("    sellingGeneralAndAdministrative: ").append(toIndentedString(sellingGeneralAndAdministrative)).append("\n");
    sb.append("    researchAndDevelopment: ").append(toIndentedString(researchAndDevelopment)).append("\n");
    sb.append("    operatingExpenses: ").append(toIndentedString(operatingExpenses)).append("\n");
    sb.append("    investmentIncomeNet: ").append(toIndentedString(investmentIncomeNet)).append("\n");
    sb.append("    netInterestIncome: ").append(toIndentedString(netInterestIncome)).append("\n");
    sb.append("    interestIncome: ").append(toIndentedString(interestIncome)).append("\n");
    sb.append("    interestExpense: ").append(toIndentedString(interestExpense)).append("\n");
    sb.append("    nonInterestIncome: ").append(toIndentedString(nonInterestIncome)).append("\n");
    sb.append("    otherNonOperatingIncome: ").append(toIndentedString(otherNonOperatingIncome)).append("\n");
    sb.append("    depreciation: ").append(toIndentedString(depreciation)).append("\n");
    sb.append("    depreciationAndAmortization: ").append(toIndentedString(depreciationAndAmortization)).append("\n");
    sb.append("    incomeBeforeTax: ").append(toIndentedString(incomeBeforeTax)).append("\n");
    sb.append("    incomeTaxExpense: ").append(toIndentedString(incomeTaxExpense)).append("\n");
    sb.append("    interestAndDebtExpense: ").append(toIndentedString(interestAndDebtExpense)).append("\n");
    sb.append("    netIncomeFromContinuingOperations: ").append(toIndentedString(netIncomeFromContinuingOperations)).append("\n");
    sb.append("    comprehensiveIncomeNetOfTax: ").append(toIndentedString(comprehensiveIncomeNetOfTax)).append("\n");
    sb.append("    ebit: ").append(toIndentedString(ebit)).append("\n");
    sb.append("    ebitda: ").append(toIndentedString(ebitda)).append("\n");
    sb.append("    netIncome: ").append(toIndentedString(netIncome)).append("\n");
    sb.append("    effectOfAccountingCharges: ").append(toIndentedString(effectOfAccountingCharges)).append("\n");
    sb.append("    taxProvision: ").append(toIndentedString(taxProvision)).append("\n");
    sb.append("    sellingAndMarketingExpenses: ").append(toIndentedString(sellingAndMarketingExpenses)).append("\n");
    sb.append("    extraordinaryItems: ").append(toIndentedString(extraordinaryItems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
